#if UNITY_EDITOR
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEditor;
using UnityEngine.Tilemaps;
using System;
using VinTools.BetterRuleTiles;
using VinTools.BetterRuleTiles.Internal;
using VinTools.Utilities;
using VinToolsEditor.Utilities;

namespace VinToolsEditor.BetterRuleTiles
{
    public class BetterRuleTileEditor : BetterRuleTileEditorWindowBase
    {
        public Texture2D t_editorIcon;

        #region Open window methods
        //[MenuItem("VinTools/Editor Windows/Better Rule Tile Editor")]
        //public static BetterRuleTileEditor ShowWindow() => GetWindow<BetterRuleTileEditor>("Rule Tile Editor");
        public static BetterRuleTileEditor ShowWindow(BetterRuleTileContainer container)
        {
            BetterRuleTileEditor window = Resources.FindObjectsOfTypeAll<BetterRuleTileEditor>().ToList().Find(t => t._file == container || t._file == null);

            if (window == null || window._file == null)
            {
                //create new window
                window = CreateInstance<BetterRuleTileEditor>();
                window._file = container;
                window.titleContent = new GUIContent(
                    container.name,
                    window.t_editorIcon,
                    $"Rule Tile Editor ({container.name})"
                    );
            }

            //set up window
            window.SetupGrid(false);
            window.SetUpGUI();

            window.Show();
            window.Focus();

            //return window
            return window;
        }
        public static void CloseWindow(BetterRuleTileContainer container)
        {
            BetterRuleTileEditor window = Resources.FindObjectsOfTypeAll<BetterRuleTileEditor>().ToList().Find(t => t._file == container);

            if (window != null)
            {
                Debug.Log($"Closed window for asset \"{container.name}\"");
                try
                {
                    window.Close();
                }
                catch (Exception)
                {

                }
            }
            else
            {
                Debug.Log($"There is no window opened for asset \"{container.name}\"");
            }
        }
        public static void DebugWindow(BetterRuleTileContainer container)
        {
            BetterRuleTileEditor window = Resources.FindObjectsOfTypeAll<BetterRuleTileEditor>().ToList().Find(t => t._file == container);

            Debug.Log(window);
        }
        #endregion


        #region Textures
        public Texture2D t_gridTex_Empty;
        public Texture2D t_gridTex_NotSame;
        public Texture2D t_gridTex_Any;

        private static Texture2D t_tileTex_Delete;
        private static Texture2D t_tileTex_Ignore;
        private static Texture2D t_tileTex_Empty;
        private static Texture2D t_tileTex_NotSame;
        private static Texture2D t_tileTex_Any;

        private static Texture2D t_toolTex_Brush;
        private static Texture2D t_toolTex_Pick;
        private static Texture2D t_toolTex_Erase;
        private static Texture2D t_toolTex_Move;
        private static Texture2D t_toolTex_Select;
        private static Texture2D t_toolTex_Inspect;
        private static Texture2D t_toolTex_Recolor;

        private static Texture2D t_actionTex_DeleteSelection;
        private static Texture2D t_actionTex_Undo;
        private static Texture2D t_actionTex_Redo;
        private static Texture2D t_actionTex_Copy;
        private static Texture2D t_actionTex_Paste;

        private static Texture2D t_actionTex_Lock;
        private static Texture2D t_actionTex_Unlock;
        private static Texture2D t_actionTex_PresetBlock;

        private static Texture2D t_optionTex_Export;
        private static Texture2D t_optionTex_LockWindows;
        private static Texture2D t_optionTex_HideSprites;
        private static Texture2D t_optionTex_Ruler;
        private static Texture2D t_optionTex_Modified;
        private static Texture2D t_optionTex_Settings;
        private static Texture2D t_optionTex_helpIcon;
        private static Texture2D t_optionTex_showSprites;
        private static Texture2D t_optionTex_universalSpriteSettings;

        private static Texture2D t_searchIcon;

        private static Texture2D t_tileInfo_downArrow;
        private static Texture2D t_tileInfo_upArrow;
        private static Texture2D t_tileInfo_rightArrow;
        private static Texture2D t_tileInfo_leftArrow;

        /// <summary>
        /// Loads all the textures from base64 to a texture2D
        /// </summary>
        override protected void SetUpTextures()
        {
            base.SetUpTextures();

            SetUpTextures_Grid();
            SetUpTextures_Tile();
            SetUpTextures_Tool();
            SetUpTextures_Action();
            SetUpTextures_Option();
            SetUpTextures_Search();
            SetUpTextures_TileInfo();
        }

        void SetUpTextures_Grid()
        {
            t_gridTex_Empty = TextureUtils.Base64ToTexture("");
            t_gridTex_NotSame = TextureUtils.Base64ToTexture("");
            t_gridTex_Any = TextureUtils.Base64ToTexture("");
        }
        void SetUpTextures_Tile()
        {
            t_tileTex_Delete = TextureUtils.Base64ToTexture("");
            t_tileTex_Ignore = TextureUtils.Base64ToTexture("");
            t_tileTex_Empty = TextureUtils.Base64ToTexture("");
            t_tileTex_NotSame = TextureUtils.Base64ToTexture("");
            t_tileTex_Any = TextureUtils.Base64ToTexture("");
        }
        void SetUpTextures_Tool()
        {
            t_toolTex_Brush = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAnElEQVQ4EaWSAQ6DMAwDYeLfZH/rv0YPzbQz0LWbpahJExunYk4pTf/g8SP5lXnENCqwiggZjAhADkhvzJyLqi/nbreaCeU9Dq7Iz14BbDsOMo2WA9+Z+X1vEqElEBrKJ/mJTL8lQB9Ejg/bXAougG09Gl8kbsmIICBCvbPumGlC/0E3wdVwEH45UiPAjmEkr61dSq3gD+V1YVi2AT9HF2/yJ+QhAAAAAElFTkSuQmCC");
            t_toolTex_Pick = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAoUlEQVQ4EaWSgQ6AIAhEq/Xf0b/5X8UZZ2ipudgYqLwDWnMIYfpj6yB8uPoZ+eIueqmHURvPXyYowazRyAQZyENPAN2xa9yXkMXuNyBMzoukvDZBCVPkEd8EAIs6ojeKpu54LAUIi5EUIWzXdygF7pcrEw1VGCW1/wAgTNSzkXHpzQts9iCuoAmjjisAFnNAdE3bRgHRMviuPmRcoTtqTfUExlgXeRZvfBEAAAAASUVORK5CYII=");
            t_toolTex_Erase = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAoElEQVQ4EaWPgQ6DIAxEwfjfw3/jv1yfWZvSFWXZJQj27p5Ye+/lH20/lM8suwrQsu7GWgHE0vD+BBjC9tlSbH4HsJAr+uPlzwCYzaeTc2WWAbR8iN8IJbrKzCPAl/EziJUjIJbxkYcMZUy9waxM5iWryfoqy6zsPESYQBBfVN2WCSmAc4Q8liMgQtoHynwqfwMN+Zvob6kX95oBCAFZ0hujLyD2EefxlgAAAABJRU5ErkJggg==");
            t_toolTex_Move = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAo0lEQVQ4EaWQAQ7CMAwDN8T/X9V/wTz1MqdLQIJKU13HdpLtY4ztn/P4Yn4ddX3t+RTgRscprAuoDBW3PVPc9dgnxMT7Uky0ToDhJjQiaTwgFaZBnavuoSUgiMMgzLvDyj81BIj46fATNSZdfeQKJ51P4GKm8RXgdIfWA1LB1QsOs3hWWDSxDnwaG1L3OgG11GWSFdcGyOMGxzQ5724FRK0RwRsxpBtuAgca/AAAAABJRU5ErkJggg==");
            t_toolTex_Select = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAs0lEQVQ4EaWQAQ7DIAwD6dR/N/0b/+pyLK6iFlinWQomITaEpdZa/sErxIfz5jHj7j1rVM15j6DEHog/WWddYgRuXjrnKg3PNYKpc8DD85GB/kJ+PxsgIGQ0HG/2B4gzzJPbp45GQIggwzzRi856NthSA42320Jl0ddSGTAjgsw0GEsH9DXIQPmVMb3CcuGbAb1ZwJ5g3IZVmwnzCvM4nx25U9mfGNCYxRqr8ZMRMLhCJuUNKDosh5UXV3MAAAAASUVORK5CYII=");
            t_toolTex_Inspect = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAA3UlEQVQ4EY2RgQ6CQAxDPeN/W/6N/8I9WKEIJi7ZrddtvSpjnufHTbybm256J2qEQC4tPTWqJn9a5vJqhiE1zvLNXxw9c7qxgksc9AEtgHIOY510qMDldZoIYHOpVCXBInd4iyi4gkfYwcFsSFVIC1uoqHN8fwV12y5ymt6UBNgOsCuIDr/sO1WV8MzuYYGdKKC+XF5rnj5Ca1iAYXV68c7FulTHMHgZVPUilDgqLLzdtlN5sYPkwCxaUBAdqkru/0M6KP427GJEV42nfwSYzWU7W+uvn9AP/CwWeXwARyQvEf2lgl0AAAAASUVORK5CYII=");
            t_toolTex_Recolor = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAACAAAAAQCAYAAAB3AH1ZAAAA2UlEQVRIDcWUAQ7CMAhFrdm9xbv1XtoXwdCmpZvWScJYP4X/QbOUc77807aA/BHkLJXs5dMYCaBnRLBH4FTXNbghQW5ZaiaAKVtfRk6jmQB+AlyK/8RMQDslZ1HGm77bWeEw9Pp57F1sAgBsWotgnvwOsNMkuFflvIC2hovmR8jpw31qW5MCVL1GAvzkFLE+MIzIeWatCCkFFTkNkn4JaZgAikEg6lbg8yV1yOiHWa/XSZ89AZBJcV/wjQCl6oetA9smOqn10Og/sJ5p0NFvgDWfbibg1LX7KZ/UXzcA8XghSgAAAABJRU5ErkJggg==");
        }
        void SetUpTextures_Action()
        {
            t_actionTex_DeleteSelection = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAhklEQVQ4EeWSXQqAMAyDrXhvL7d7qYEmxCpz4qMFWX/Sb3VbtNamLzYPNK+HZrMPsSxyAgiqRSZQo4/UKV5ShMVFiB3qvtfCASi4AXjazYrKj5wB+jgBV7FGAWqozo8AvGKuOoreNULEq1RDOgI9AQipgNfvoAIU+wSXRyJVxyFA/9TR3pZ2XHkVwJjw9NEAAAAASUVORK5CYII=");
            t_actionTex_Undo = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAgUlEQVQ4Ec1QQQ7AIAgby/6t+xv/2qhLDQfINB42EgJiWyuiqttK7CtkcP8rUMzdlSTueogtEUDpk4fojmnbONwBRBCs6KslQD4xYzQndMAhq3fEma98SOjAX76RgSWmRAJU96JRX21YIwGAR0ROAA9L2sF5NsIdTIlkXxgW+V7gBvx2GX/hLLTvAAAAAElFTkSuQmCC");
            t_actionTex_Redo = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAeklEQVQ4Ed1R0QqAIBDL6L+1f7v/slu6ODjlAl+iwXG4tjU0ici2gn3FDO/3ArK2qpPBN4dkLhHGN0hGVHkHNr2oACI74Aj+6N5sQNKm02A3dQ+HBrmfIjNkToOA0kdXiGEDuM7Q2l7HyQ5lXC2nasRQx1eYeGL6BwEXCkkZfQv3RjwAAAAASUVORK5CYII=");
            t_actionTex_Copy = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAhUlEQVQ4Ee2SSw6AIAxEwXhv5W69l2ZQYOgn0biVBGmn7QMLWUTSl7E6xYejQcqe7gG8ZEAxDWQhKhI28rWJYuRMgwEIlClqHQPRAFsyFOzeTtDWFPVglF2W/vcOeHMCDa3+D0jhLfQuu50j0WsiriyaO8UqRr+DJzuXWnl/GKAfC+eF9glrmRB9HN2nSgAAAABJRU5ErkJggg==");
            t_actionTex_Paste = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAkklEQVQ4Ea2QUQ6AMAhDnfHezrvtXmqNNKyBuCXyxaB9A0prbUnifOsl6T/lLWiqUd+dZXUvCCOxTeD7tOkEEIfCu249mpEoADX7EflnRABbQ80hOALAqGJbqyrVH1F7+ga0anEGAC8g3YozAFsDIEKyG0DkI7rJ05+ZwAOZ/w7YiR5M/ATY8xj0UZYdkVemMkkuo0sXdbWUxZwAAAAASUVORK5CYII=");
            t_actionTex_Lock = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAh0lEQVQ4EcVS0Q6AIAiU1n/Xx/Ff5s3YACEefIiNQLy7QCVmbjt2JORr1Ltz1BbLBO6BhNPryOGLUTIC/g6ytqjWsg408TP/X+AM+sOsMIlzNb/LOfgRIpIWQG4wXsCDy3UlIO8gFaoEUqJsbAtEtyDiiObA9IbkvgP/fAWno8FEHRiAZkb5A5DgE7kWSo56AAAAAElFTkSuQmCC");
            t_actionTex_Unlock = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAfUlEQVQ4EcVSAQqAMAjM6N/1OP9Vu+FEzMyI6EBy0zu9ETHz9AZzgby2nt0F7joqAlvrRJAEckQHFSxgOsgWelfZwBJP+f8Ci9sJ3iKoZynqm1gLV+QhGNatwGh89M0EdM1MMRPIeFr7VCB8NB0tid3gznNY9/9B2OSn2vMBFUgSuO8kDhAAAAAASUVORK5CYII=");
            t_actionTex_PresetBlock = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAo0lEQVQ4EaVSQQ6AIAwD47/Vv/EvzYA2ZWHEKAc3urbWxVxKSX/O9lF8Q7cyOEAKap1n9wlwziJSDD3HmsCGJoT46CzFrD87bvVUg46zXOzGRvFrZYAEo7zdLEk9O5pJ1Tf5MT43RQmMsEpAw5mBie0gAe4NdU9voGRNoPhg8WYHXJgoifkEwuEOkGRa9U8MY6qr9DWFJmAsIUUtuX4HHERKjz9aUR0Gtqw0XQAAAABJRU5ErkJggg==");
        }
        void SetUpTextures_Option()
        {
            t_optionTex_Export = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAACAAAAAQCAYAAAB3AH1ZAAAA3klEQVRIDcVUAQ4CIQwT478P/sa/lCYrKQvIHYeRhGzrtnbuiCHn/PjneS6Ivxd6hi0rA4Bs2xA6AEh5DxmZGC1TiG+flzF4slRwj90W6xHoBpCP5QY4chDrZcrXEb9kuQE2JXP460ciI5w87Gfsbe33G9DCqIH5R7G1uZMnFOl0bJML9j/AiUmOmL5y+DrNeR/DRgciToqNNtAT174zPoSiFMJvxJHzbwDYzqOC6leNXw8Aoa4wJ/CfAN9tdL7lRj1T3D/CaYMVhLOFszpu4ArhldqZfvMItxJPla3gAzqhI48gZrJAAAAAAElFTkSuQmCC");
            t_optionTex_LockWindows = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAApElEQVQ4EaWSgQrDMAhEk7H/XvZv+a/NC33lktIgmyBGPU+vtPbeyz/2SA6/AvcxVz4sS9ACLa9H1HtYTUrQdg1jZ569gMFLzBCgV1txEY06BDTWKGA7XBJwagWC6J1NQK75LUDY2BqRfCJYtytfra2FpxV8o5X3T5ewQ3I6S8iLX3BH0KKBO0a1wo8kvbCrnrasBCecPq5LmBo+sXtD8NP5Iv4CHOYn/qmo8ZUAAAAASUVORK5CYII=");
            t_optionTex_HideSprites = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABH0lEQVQ4EZ2TMU7DQBBFbRQqiESZipqSA9DmHhyBAhoaJgW0UHIA7sAFXOYUVOlJH95bZqLISpHkS8873vWf2Vnb/TAM3Qm6xHMDy8mJ5m98tzA/NoGVNd9BD7MzLvv0wuRmxCv3u2Z9q3GCMgaLYhV5g2ewcsBWlWBsPOeJK/iFNdyDisTd6ek8A4NIFozqHR5a9H+5YPgA16U8Xc9rNFvkAkOTlT2wUhA8wrQmGFuSamFnvoX2XQoC2SsTRGJGZWV3oCIx/vKSqhZiwkT1HcTyAzP4BLftIWp+gjIStmcX1YJJ7E/zdS6ucs55Y3cViS22wpWgvjDNLqqATWIsWyNxk2+hzPV51tpBozvwr/LHqMoHGeshEyxhDh7c0foD2K5Da9EfmwgAAAAASUVORK5CYII=");
            t_optionTex_Ruler = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAXElEQVQ4EWM8cuQIAyWAiRLNIL3DwAAWoDf+UxIOsDBgBBrSADWIJDYjMBpBLgBpAgGS2TAXQLQjDALxYYbiY1MejaBABAGyAxJkALJTwaaRQqCHASl6wWqHgQEAF/IPRGlc/KgAAAAASUVORK5CYII=");
            t_optionTex_Modified = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAABCElEQVQ4EY2TMVLDUBBDMRN6jsIRnBtR0yAKaDkSLnyqNEbPs8psjM1EM+LvavX1N2QyzPP8sIP30j52ZrvS0IL65aXcg8+u74YgnmqCWVX3Y6sfbvjYb1WtpvW6yX/LBPFSv8RHgoFcHG6DiSDWX0yZYBsgaxBP+On6BtnoRqyGB9SYLb+svZmE4llBECtjkglikGv4ZD6bP8WLz/jleg07uQA0ojDUyCPf5qsZjFUwA+JPgqiBGmN8YbDB6J55PEpQhI3//jZB3Ohhqgi0yRzNjqma/EuuG3VTAlVi+rH6ySfaNYT+6OvHqOLiE5yL1Ggqrg/1H631XeTlPpSbNSDiPUHx/nv+Al97QON2NlnVAAAAAElFTkSuQmCC");
            t_optionTex_Settings = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAACAAAAAQCAYAAAB3AH1ZAAABMUlEQVRIDcWUC27CQAxEuxXXLjVwtZyr6TyyA44VAUmoOpJZf8YeZxPRhmH4+E98FvHvFOOP3Wo+0fa5eQFEQpbF6vRXOLXnYdz6KziKFbImG2VLoJYRCk45scX3DZzVHGVAFWQxLwd3tzh6XgCfJTJCAXWsitVYlG049DbeLfATIoA5b0FiODWv1AxwHqG56G+AhtzEUyMSMhAylviRAQ/wOWXvv7n3np280MGsKxD6CyAQC4PJ3cSp+xVQAGwOODMR3zXqwc8TuD86j9O5ntJVln/CURUMQHYD4l6gycdehfs8a9aXF4AYsnHGmAIEcx7uZYG3OuVvwOIMWHrCLA4nZF84e+EFuJ6QIcQyLEHOwIfrHOdbbuBghT6cBc4p15KPi3DlFMq6MH8D6zrfxP4FUdJIdZyTcsgAAAAASUVORK5CYII=");
            t_optionTex_helpIcon = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAA4UlEQVQ4EX2SCw6DMAxD6cS9CXfjXl1eiasQulky5GOnKVu7rmtb4PCalTr5WWrbpxQwdqcFm7+hcnpoJvIAGhbElE8jzoPmkN0bIJtl7HdrPhmgnkX1bPENEFOUoJpDP7Yg1oGNK5AAme/sfnIqrJD24AoWzKKVKfeJDXIF1v1nyNepup5/BZ/zwj/zEGuAvsNrQhTqyZSHhwEW9NcLGFdmhAYZcDrBaguuACukPXUFcwVUw8OfQGPBbQ+ZtqABlNf1s3lotIFM5gHszrwNMTUL6oBNf2WvP4DBHpU7n0b1vi/uOlUKB4+sAAAAAElFTkSuQmCC");
            t_optionTex_showSprites = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAAApElEQVQ4Ea2T4Q6AIAiEtfXe1bv5XhUl7DpA/9TmBO/4RLZqa6388a0EOSnntPKB5ggSSGrsBalnUeJgl+JZpwU7yljS5dbFPTXBsKO2Z53YKLKnSQcKFnO27KIIZGLyDNGdh0HOEMDsOagxCDWO8RIHQ5ATgaQQ3UF6QwTJiQ71ACcXc/5YGQT1TxgW3Yo7n4EYjPkHNgKNZqZA88x+ETNqZbZfPxobv6jGdBQAAAAASUVORK5CYII=");
            t_optionTex_universalSpriteSettings = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAAAzUlEQVQ4Ea2Raw7DMAiD26n3Lrlb77XxRVjy0kf2Y5YywGCXZOtxHMs/sJnJ2/KrdL0ixckIk8fB7D/OvOR4ExHPNu3SmdG45Z4qzglrPTZfdZHXLoxyYFZ8g9MbVb8HTAAx6mToORFgEiSFNl5NJhrwGFZ43mk3ujNxEVfyJ6DXr+ZvlNwXIiuO4AZw/uHQRuOQxD9HGSHAzE+rOjIC30B5JI+mbfnzhD2bYQMyEKXe6V/TwFWUiJ7n1MtsI64nkEcVIz81QuciGY388gGl3ioV/XyDuwAAAABJRU5ErkJggg==");
        }
        void SetUpTextures_Search()
        {
            t_searchIcon = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAjElEQVQoFY2P3Q2AMAiEqXGvjiZuVpMOJqccQfriJdjj5yu1zTklqSd/JR92CydymB8pkC8igKZ6tOQXaLdmTwOneYinmh8W8TxusFoMwUOE3sy/Gajra/4gALBOPTiEk7V4jtUE/wBxvZpHQOoBz34ALA4YF29Wzx+IG+oQc94cUAU4mM8P9AcATEhuAYYeOY/JlXYAAAAASUVORK5CYII=");
        }
        void SetUpTextures_TileInfo()
        {
            t_tileInfo_upArrow = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAfklEQVQ4Ed2S4QqAIAyEM3rv1rv5XrUPaRymIfgnOhiObXc7xZRzXmawzpDhfl9gd5dEF1u3U4gm/UPySHtvwFaLqZI3nbQElIzILcT5EKmvUJPVNgIEiLo6eCNDMJgO8wgnSX7iSddhHrGBgkCXJOoqIHPjqV5hnCWTPxC4AJJKGQENuHbMAAAAAElFTkSuQmCC");
            t_tileInfo_downArrow = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAj0lEQVQ4Ed2RWwqEMAxFR3Hfxr11X5rTyZW0PkD8GJhAm/S+aHUopXze1PjGjPfPAlZ/EmvmbRcFJ12V5G9gYaKfhYDBUVZ333LAkggEOaQ3o601aYguwvzMUlkMdGkq1AcASmA+s1TmgzhhzRN2MISWAOaDGf7sBuBUNuT5y8Z+F9CHNEYd8l8Q9qj/PmAD5jYXdVL4jB8AAAAASUVORK5CYII=");
            t_tileInfo_rightArrow = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAfklEQVQ4EaWQQQqAMAwErfhv49/6L82AHtRkU+hCLCTOkLb13peZrDMwbCY4fbaPyDMBrHmVkkwATMxLSjLBccN+aEkmABySKMGQpBIgkakEPKDdBk6u9YoSlDCmTDAEK4Ex9JjXb20GT7INmJuXhPlp4xOkBb2wpTYIgW/zAvzeFO3c2D5VAAAAAElFTkSuQmCC");
            t_tileInfo_leftArrow = TextureUtils.Base64ToTexture("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAdklEQVQ4EaWPQQrAIAwEaz9e+zf/ZTtQispGF8xFDZkxm0opx06dOzCsK7je2ao+cwTAWcH0VoIWlpKZYIRvtUUksOAogg1HArVp2FMRyJo/gpONwlIChm1JJLAlM4GS0OtqJWC4jdPBPBwBc0gSl7Fcwcj97wcbTxVscLFVRAAAAABJRU5ErkJggg==");
        }

        void GetButtonStyle()
        {
            //create icon button style
#if UNITY_2021_1_OR_NEWER
            _iconButton = new GUIStyle(EditorStyles.iconButton);
#else
            _iconButton = GUI.skin.FindStyle("IconButton") ?? EditorGUIUtility.GetBuiltinSkin(EditorSkin.Inspector).FindStyle("IconButton");
#endif
        }
#endregion

        public void SetupGrid(bool _new = false)
        {
            switch (_file.settings._gridShape)
            {
                case BetterRuleTileContainer.GridShape.Isometric: _grid = new IsometricEditorGrid(this, _new); return;
                case BetterRuleTileContainer.GridShape.HexagonalPointedTop: _grid = new HexagonalEditorGrid(this, false, _new); return;
                case BetterRuleTileContainer.GridShape.HexagonalFlatTop: _grid = new HexagonalEditorGrid(this, true, _new); return;
                default: _grid = new EditorGridBase(this, _new); return;
            }
        }

#region Variables
        public BetterRuleTileContainer _file = null;
        public EditorGridBase _grid;

        //selection
        public bool _hasSelection = false;
        public Vector2Int _selectionStart;
        public Vector2Int _selectionEnd;
        public Rect _selectionRect
        {
            get
            {
                return new Rect(
                    new Vector2Int(Mathf.Min(_selectionEnd.x, _selectionStart.x), Mathf.Min(_selectionEnd.y, _selectionStart.y)),
                    new Vector2Int(Mathf.Abs(_selectionEnd.x - _selectionStart.x) + 1, Mathf.Abs(_selectionEnd.y - _selectionStart.y) + 1)
                    );
            }
        }

        public Vector2Int _moveFromPos;
        public Vector2Int _moveToPos;
        public bool _movingSelection = false;

        public List<BetterRuleTileContainer.GridCell> _clipboard = new List<BetterRuleTileContainer.GridCell>();
        public Rect _clipboardRect;
        public Vector2Int _clipboardOriginalPos;
        public bool _hasPasteSelection = false;
        public bool _movingPasteSelection = false;

        public BetterRuleTileContainer.GridCell _inspectingCell;

        public GUIBuilder guiBuilder = new GUIBuilder();
#endregion

#region properties
        public float _zoomAmount { get => _file.settings._zoomAmount; set => _file.settings._zoomAmount = value; }
        public Vector2Int _gridCellSize { get => _file.settings._gridCellSize; set => _file.settings._gridCellSize = value; }
        public Vector2 _tileRenderOffset { get => _file.settings._tileRenderOffset; set => _file.settings._tileRenderOffset = value; }
        public Vector2 _gridOffset { get => _file.settings._gridOffset; set => _file.settings._gridOffset = value; }

        private bool _lockWindows { get => _file.settings._lockWindows; set => _file.settings._lockWindows = value; }
        public bool _hideSprites { get => _file.settings._hideSprites; set => _file.settings._hideSprites = value; }
        public bool _showRuler { get => _file.settings._showRuler; set => _file.settings._showRuler = value; }
        public bool _showModified { get => _file.settings._showModified; set => _file.settings._showModified = value; }
#endregion

        private void SetUpGUI()
        {
            //reset variables
            _selectedDrawerTile = int.MinValue;
            _hideSprites = false;
            _hasSelection = false;
            _hasPasteSelection = false;
            _inspectingCell = null;
        }
        protected override void CreateGUI()
        {
            base.CreateGUI();

            //set up drawer
            if (_file.settings._saveSpriteDrawer) AddObjectsToSpriteDrawer(_file._imageObjects.ToArray());

            //set up window positions
            SetUpWindows();

            //set window variables
            foreach (var item in _windows) item.ApplyLayout(position);
            _window_Toolbar.lockPosition = true;
        }
        protected override void OnGUI()
        {
            base.OnGUI();


            if (_file == null)
            {
                GUIStyle style = new GUIStyle("boldlabel");
                style.alignment = TextAnchor.MiddleCenter;

                GUI.Label(new Rect(position.width / 2 - 150, position.height / 2 - 20, 300, 20), "Double click or open a \"Better Rule Tile Container\"", style);
                GUI.Label(new Rect(position.width / 2 - 150, position.height / 2 - 00, 300, 20), "asset to start editing it in this window.", style);

                this.Close();

                return;
            }

            wantsMouseMove = true;


            //draw grid stuff
            if (_grid == null) SetupGrid(false);
            _grid.DrawAll();

            //drag and drop
            CheckDragAndDrop();

            //tools
            HandleTools();

            //wondows
            DisplayWindows();
        }

#region Drag & Drop
        void CheckDragAndDrop()
        {
            if (IsMouseOverWindow())
            {
                //drag drop into sprite drawer if selecting something
                if (IsMouseOverWindow(_window_SpriteDrawer) && DragAndDrop.objectReferences.Length > 0) DragDropToDrawer(DragAndDrop.objectReferences);
                
                //drag & drop into sprite settings
                if (IsMouseOverWindow(_window_UnivesalSpriteSettings) && DragAndDrop.objectReferences.Length > 0) DragDropToSpriteSettings(DragAndDrop.objectReferences);
            }
            else
            {
                //dragdrop
                if (DragAndDrop.objectReferences.Length == 1 && DragAndDrop.objectReferences[0] is Texture2D) DragDropImage(DragAndDrop.objectReferences[0] as Texture2D);
                else if (DragAndDrop.objectReferences.Length > 0 && DragAndDrop.objectReferences.All(t => t is Sprite)) DragDropSprites(DragAndDrop.objectReferences);
                else DragAndDrop.visualMode = DragAndDropVisualMode.Rejected;
            }
        }

        void DragDropSprites(UnityEngine.Object[] sprites)
        {
            //set drag and drop icon
            DragAndDrop.visualMode = DragAndDropVisualMode.Copy;

            //get box size
            int boxSize = 1;
            while (boxSize * boxSize < sprites.Length) boxSize++;

            //draw outline
            _grid.DrawGridTileOutline(_grid.GetMouseTilePos(), new Vector2Int(boxSize, boxSize), c_highlightColor);

            //add asset
            if (Event.current.type == EventType.DragPerform)
            {
                for (int i = 0; i < sprites.Length; i++)  _file.SetSprite(_grid.GetMouseTilePos() + new Vector2Int(i % boxSize, i / boxSize), sprites[i] as Sprite);
            }

            //update ui
            _needsRepaint = true;
        }
        void DragDropImage(Texture2D image)
        {
            //set drag and drop icon
            DragAndDrop.visualMode = DragAndDropVisualMode.Copy;

            //load sprites  
            List<Sprite> sprites = new List<Sprite>();
            foreach (var item in AssetDatabase.LoadAllAssetsAtPath(AssetDatabase.GetAssetPath(image)).Where(t => t is Sprite).ToArray()) sprites.Add(item as Sprite);

            if (sprites.Count <= 0) return;

            //get texture grid size
            Vector2Int spriteSize = new Vector2Int((int)sprites.Average(t => t.rect.width), (int)sprites.Average(t => t.rect.height));
            Vector2Int gridAmount = new Vector2Int(image.width / spriteSize.x, image.height / spriteSize.y);

            //draw outline
            _grid.DrawGridTileOutline(_grid.GetMouseTilePos(), gridAmount, c_highlightColor);

            //add asset
            if (Event.current.type == EventType.DragPerform)
            {
                //sort
                sprites = sprites.OrderBy(t => t.rect.x - t.rect.y * 1000).ToList();

                //place
                for (int i = 0; i < sprites.Count; i++)
                {
                    //if all tiles are the same size
                    if (sprites.All(t => (int)t.rect.width == spriteSize.x && (int)t.rect.height == spriteSize.y))
                        _file.SetSprite(_grid.GetMouseTilePos() + new Vector2Int((int)sprites[i].rect.x / spriteSize.x, (int)sprites[i].rect.y / -spriteSize.y + gridAmount.y - 1), sprites[i]);
                    //else just lay them out 
                    else
                        _file.SetSprite(_grid.GetMouseTilePos() + new Vector2Int(i % gridAmount.x, i / gridAmount.x), sprites[i]);
                }
            }

            //update ui
            _needsRepaint = true;
        }
        void DragDropToDrawer(UnityEngine.Object[] objects)
        {
            DragAndDrop.visualMode = DragAndDropVisualMode.Copy;

            //return if not releasing mouse
            if (Event.current.type != EventType.DragPerform) return;

            //add sprites
            AddObjectsToSpriteDrawer(objects);
            if (_file.settings._saveSpriteDrawer) _file._imageObjects.AddRange(objects.Where(t => !_file._imageObjects.Contains(t)));
        }
        void DragDropToSpriteSettings(UnityEngine.Object[] objects)
        {
            DragAndDrop.visualMode = DragAndDropVisualMode.Copy;

            //return if not releasing mouse
            if (Event.current.type != EventType.DragPerform) return;
            //if mouse is inside the sprite dropdown UI don't add new sprites
            if (_spriteSettingsNoDropZone.Contains(Event.current.mousePosition)) return;

            foreach (var obj in objects)
            {
                if (obj is Sprite)
                {
                    var item = (Sprite)obj;

                    if (_file._overrideSprites.Exists(o => o.BaseSprite == item)) //sprite is already added to the overrides
                    {
                        EditorUtility.DisplayDialog("Sprite already added.", "This sprite has been already added to the overrides.", "OK");
                    }
                    else if (_file._overrideSprites.Exists(o => o.Sprites.Contains(item))) //sprite is part of an another animation
                    {
                        if (EditorUtility.DisplayDialog("Are you sure you want to add this sprite?", "This sprite is already a part of an another sprites output. Do you still want to add it as a separate override?", "Yes", "Nevermind")) AddSprite(item);
                    }
                    else //sprite is not in the list yet
                    {
                        AddSprite(item);
                    }
                }
            }

            void AddSprite(Sprite sprite)
            {
                _file._overrideSprites.Add(new BetterRuleTileContainer.UniversalSpriteData(sprite));
            }
        }

        void AddAllTextureAssets()
        {
            var objects = Resources.FindObjectsOfTypeAll<Texture2D>();
            AddObjectsToSpriteDrawer(objects);
            Debug.LogWarning("Added all textures to the sprite drawer.");
        }
        void AddObjectsToSpriteDrawer(UnityEngine.Object[] objects)
        {
            foreach (var ob in objects)
            {
                if (ob == null) continue;

                if (ob is Texture2D) foreach (var item in AssetDatabase.LoadAllAssetsAtPath(AssetDatabase.GetAssetPath(ob)).Where(t => t is Sprite).ToArray()) _grid.CacheSprite(item as Sprite);
                else if (ob is Sprite) _grid.CacheSprite(ob as Sprite);
            }
        }
#endregion

#region Selection and clipboard functions
        void DeleteSelection()
        {
            _hasPasteSelection = false;
            if (_hasSelection) 
            { 
                _file.DeleteArea(_selectionRect); 
                _hasSelection = false; 
            }
        }
        void CopySelection()
        {
            if (!_hasSelection) return;

            _clipboard.Clear();
            foreach (var item in _file.Grid.Where(t => _selectionRect.Contains(t.Position)).ToArray())
            {
                var cell = BetterRuleTileContainer.GridCell.Clone(item);
                cell.Locked = false;

                _clipboard.Add(cell);
            } 
            _clipboardRect = _selectionRect;
            _clipboardOriginalPos = new Vector2Int((int)_clipboardRect.position.x, (int)_clipboardRect.position.y);
        }
        void MoveClipboard(Vector2Int by)
        {
            for (int i = 0; i < _clipboard.Count; i++) _clipboard[i].Position += by;
            _clipboardRect.position += by;
        }
        void StartPaste()
        {
            _hasPasteSelection = true; 
            _hasSelection = false; 
            _selectedTool = 3;
        }
        void PasteClipboard()
        {
            if (!_hasPasteSelection) return;

            Vector2Int currentPos = new Vector2Int((int)_clipboardRect.position.x, (int)_clipboardRect.position.y);

            _file.PasteGrid(_clipboard, currentPos - _clipboardOriginalPos);
            _hasPasteSelection = false;
        }

        void LockSelection()
        {
            _hasPasteSelection = false;
            if (_hasSelection)
            {
                _file.LockArea(_selectionRect);
            }
        }
        void UnlockSelection()
        {
            _hasPasteSelection = false;
            if (_hasSelection)
            {
                _file.UnlockArea(_selectionRect);
            }
        }
        void CreatePresetBlock()
        {
            if (_hasSelection)
            {
                _file.CreatePresetBlock(_selectionRect);
                _hasSelection = false;
            }
        }
#endregion

#region Tools
        void HandleTools()
        {
            //keyboard shortcuts
            switch (Event.current.keyCode)
            {
                case KeyCode.B: _selectedTool = 0; break;
                case KeyCode.I: _selectedTool = 1; break;
                case KeyCode.D: _selectedTool = 2; break;
                case KeyCode.M: _selectedTool = 3; break;
                case KeyCode.S: _selectedTool = 4; break;
                case KeyCode.E: _selectedTool = 5; break;
                case KeyCode.C: if (Event.current.modifiers == EventModifiers.Control && Event.current.type == EventType.KeyDown) CopySelection(); break;
                case KeyCode.V: if (Event.current.modifiers == EventModifiers.Control && Event.current.type == EventType.KeyDown) StartPaste(); break;
                case KeyCode.Delete: DeleteSelection(); break;
                case KeyCode.Escape: _hasSelection = false; _inspectingCell = null; PasteClipboard(); break;
                case KeyCode.L: LockSelection(); break;
                case KeyCode.U: UnlockSelection(); break;
                case KeyCode.P: CreatePresetBlock(); break;
            }

            //handle selection
            if (_selectedTool < 3) _hasSelection = false;
            if (_selectedTool < 4) _inspectingCell = null;
            if (_hasPasteSelection && _selectedTool != 3) PasteClipboard();

            //return if left mouse is not pressed
            if (Event.current.button != 0) return;

            //turn off tools if mouse is in a window
            if (DidMouseClickWindow()) return;

            //higlight cell 
            //DrawGridTileOutline(GetMouseTilePos(), _highlightTexture);
            //_needsRepaint = true;

            //tools
            switch (_selectedTool)
            {
                case 0: HandleTool_Brush(); break;
                case 1: HandleTool_Picker(); break;
                case 2: HandleTool_Eraser(); break;
                case 3: HandleTool_Move(); break;
                case 4: HandleTool_Select(); break;
                case 5: HandleTool_Inspect(); break;
            }
        }

        void HandleTool_Brush()
        {
            //only continue when dragging mouse 0
            if (Event.current.type != EventType.MouseDrag && Event.current.type != EventType.MouseDown) return;

            //painting sprites
            if (_selectedDrawerTile == 0)
            {
                _file.SetSprite(_grid.GetMouseTilePos(), _selectedSprite);
            }
            //painting tiles
            if (_selectedDrawerTile > 0)
            {
                _file.SetTile(_grid.GetMouseTilePos(), _file.Tiles[_selectedDrawerTile - 1].UniqueID);
            }
            //painting default tiles
            if (_selectedDrawerTile < 0)
            {
                switch (_selectedDrawerTile)
                {
                    case -1: _file.RemoveTile(_grid.GetMouseTilePos()); break;
                    default: if (_selectedDefaultTile > -5) { _file.SetTile(_grid.GetMouseTilePos(), _selectedDrawerTile); } break;
                }
            }

            _needsRepaint = true;
        }
        void HandleTool_Picker()
        {
            //only continue code when releasing button 0
            if (Event.current.type != EventType.MouseUp) return;

            //find the tile we selected
            var tile = _file.Grid.Find(t => t.Position == _grid.GetMouseTilePos());
            if (tile == null) return;

            //get sprite
            if (tile.Sprite != null)
            {
                _selectedDrawerTile = 0;
                _selectedSprite = tile.Sprite;
                _selectedTool = 0;
                _needsRepaint = true;
                return;
            }

            //if no sprite get tile
            if (_file.DoesTileExist(tile.TileID))
            {
                if (tile.TileID < 0) _selectedDrawerTile = tile.TileID;
                //if the order does not match up with the tile id this makes sure to get the correct index
                else _selectedDrawerTile = _file.Tiles.IndexOf(_file.Tiles.Find(t => t.UniqueID == tile.TileID)) + 1;

                _selectedTool = 0;
                _needsRepaint = true;
                return;
            }
        }
        void HandleTool_Eraser()
        {
            //only continue when dragging mouse 0
            if (Event.current.type != EventType.MouseDrag && Event.current.type != EventType.MouseDown) return;

            //draw outline
            _grid.DrawGridTileOutline(_grid.GetMouseTilePos(), t_highlightTexture);
            _needsRepaint = true;

            //find the tile we selected
            var tile = _file.Grid.Find(t => t.Position == _grid.GetMouseTilePos());
            if (tile == null) return;

            //remove
            _file.RemoveSprite(tile.Position);
            _needsRepaint = true;
        }
        void HandleTool_Move()
        {
            //move selection
            if (_hasSelection)
            {
                if (Event.current.type == EventType.MouseDown)
                {
                    //set drag start postition
                    _moveFromPos = _grid.GetMouseTilePos();
                    _moveToPos = _moveFromPos;
                    _movingSelection = true;
                }

                if (Event.current.type == EventType.MouseDrag)
                {
                    _moveToPos = _grid.GetMouseTilePos();
                    _movingSelection = true;
                }

                if (Event.current.type == EventType.MouseUp)
                {
                    Vector2Int movedBy = _moveToPos - _moveFromPos;

                    _file.MoveArea(_selectionRect, movedBy);

                    _selectionStart += movedBy;
                    _selectionEnd += movedBy;
                    _movingSelection = false;
                }
            }

            //move clipboard
            if (_hasPasteSelection)
            {
                if (Event.current.type == EventType.MouseDown)
                {
                    //set drag start postition
                    _moveFromPos = _grid.GetMouseTilePos();
                    _moveToPos = _moveFromPos;
                    _movingPasteSelection = true;
                }

                if (Event.current.type == EventType.MouseDrag)
                {
                    _moveToPos = _grid.GetMouseTilePos();
                    _movingPasteSelection = true;
                }

                if (Event.current.type == EventType.MouseUp)
                {
                    Vector2Int movedBy = _moveToPos - _moveFromPos;

                    MoveClipboard(movedBy);
                    _movingPasteSelection = false;
                }
            }
        }
        void HandleTool_Select()
        {
            if (Event.current.type == EventType.MouseDown)
            {
                _hasPasteSelection = false;
                _hasSelection = true;
                _selectionStart = _grid.GetMouseTilePos();
                _selectionEnd = _selectionStart;
            }
            if (Event.current.type == EventType.MouseDrag) _selectionEnd = _grid.GetMouseTilePos();
        }
        void HandleTool_Inspect()
        {
            if (Event.current.type == EventType.MouseDown)
            {
                _inspectingCell = _file.Grid.Find(t => t.Position == _grid.GetMouseTilePos());
            }
        }
#endregion

    #region Window methods
        #region Variables
        private GUIWindow _window_Toolbar
        {
            get => _windows[0];
            set => _windows[0] = value;
        }
        private GUIWindow _window_TileDrawer
        {
            get => _windows[1];
            set => _windows[1] = value;
        }
        private GUIWindow _window_TileInfo
        {
            get => _windows[2];
            set => _windows[2] = value;
        }
        private GUIWindow _window_SettingsWindow
        {
            get => _windows[3];
            set => _windows[3] = value;
        }
        private GUIWindow _window_ExportWindow
        {
            get => _windows[4];
            set => _windows[4] = value;
        }
        private GUIWindow _window_RecolorWindow
        {
            get => _windows[5];
            set => _windows[5] = value;
        }
        private GUIWindow _window_GridCellInfo
        {
            get => _windows[6];
            set => _windows[6] = value;
        }
        private GUIWindow _window_SpriteDrawer
        {
            get => _windows[7];
            set => _windows[7] = value;
        }
        private GUIWindow _window_UnivesalSpriteSettings
        {
            get => _windows[8];
            set => _windows[8] = value;
        }

#endregion
        #region Base window functions

        protected override void SetUpWindows()
        {
            base.SetUpWindows();

            _windows = new GUIWindow[9];

            _window_Toolbar = new GUIWindow(GUIWindow.WindowLayout.SpanTop, new RectOffset(0, 0, 0, 0), new Vector2(position.width, 26), ToolbarWindow, new GUIContent(""), true, false, false, GUIStyle.none);
            _window_TileDrawer = new GUIWindow(GUIWindow.WindowLayout.BottomLeftCorner, new RectOffset(4, 4, 30, 4), Vector2.zero, TileDrawerWindow, new GUIContent(""));
            _window_TileInfo = new GUIWindow(GUIWindow.WindowLayout.BottomRightCorner, new RectOffset(4, 4, 30, 4), new Vector2(300, 400), TileInfoWindow, new GUIContent(""), false);
            _window_SettingsWindow = new GUIWindow(new Rect(0, 0, 300, 400), SettingsWindow, new GUIContent(""), false, true, true);
            _window_ExportWindow = new GUIWindow(new Rect(0, 0, 250, 50), ExportWindow, new GUIContent(""), false, true, true);
            _window_RecolorWindow = new GUIWindow(new Rect(0, 0, 250, 50), RecolorWindow, new GUIContent(""), false, true, true);
            _window_GridCellInfo = new GUIWindow(GUIWindow.WindowLayout.BottomRightCorner, new RectOffset(4, 4, 30, 4), new Vector2(300, 400), GridCellInfoWindow, new GUIContent(""), false);
            _window_SpriteDrawer = new GUIWindow(GUIWindow.WindowLayout.SpanLeft, new RectOffset(4, 4, 30, 125), new Vector2(180, 400), SpriteDrawerWindow, new GUIContent(""));
            _window_UnivesalSpriteSettings = new GUIWindow(GUIWindow.WindowLayout.SpanLeft, new RectOffset(4, 4, 30, 125), new Vector2(300, 400), UniversalSpriteSettingsWindow, new GUIContent(""));
        }
        protected override void DisplayWindows()
        {
            base.DisplayWindows();

            if (_window_TileInfo != null) _window_TileInfo.visible = _selectedDrawerTile > 0 && _inspectingCell == null;
            if (_window_GridCellInfo != null) _window_GridCellInfo.visible = _inspectingCell != null;
            if (!_window_UnivesalSpriteSettings.visible) _currentlySepectedSpriteToModify = -1;
            _window_SpriteDrawer.visible = _file.settings._displaySpriteDrawer;
            _window_UnivesalSpriteSettings.visible = _file.settings._displayUniversalSpriteSettings;
        }
#endregion

        #region Window toolbar
        private int _selectedTool = 0;
        private GUIContent[] _toolbarTextures => new GUIContent[] {
            new GUIContent(t_toolTex_Brush, "Paint selected tile or sprite to the grid (B)"),
            new GUIContent(t_toolTex_Pick, "Pick tiles or sprites from the grid (I)"),
            new GUIContent(t_toolTex_Erase, "Delete sprites (D)"),
            new GUIContent(t_toolTex_Move, "Move selected sprites on the grid (M)"),
            new GUIContent(t_toolTex_Select, "Select one or multiple sprites on the grid (S)"),
            new GUIContent(t_toolTex_Inspect, "Inspect a tile on the grid and modify it (E)")
        };

        private int _toolbarNumLines = 1;

        void ToolbarWindow(int WindowID)
        {
            //Debug.Log(position.width);

            //calculate toolbar height
            int toolbarStage = 1;
            if (position.width < 980) toolbarStage = 2;
            if (position.width < 668) toolbarStage = 3;
            if (position.width < 508) toolbarStage = 4;
            if (position.width < 474) toolbarStage = 5;

            _toolbarNumLines = 1;
            if (toolbarStage > 1) _toolbarNumLines = 2;
            if (toolbarStage > 3) _toolbarNumLines = 3;

            //set height
            _windows[WindowID].height = _toolbarNumLines * 24 + 2;





            if (t_defaultButtonTexture == null || t_toolbarBackgroundTexture == null) SetUpTextures_Solid();

            //draw background
            EditorGUI.DrawRect(_window_Toolbar.rectangle, c_toolbarBackgroundColor);

            //create button style
            if (_toolbarButtonStyle == null || _toolbarButtonStyle.normal.background == null) SetUpStyles();

            //create toolbar
            var toolbar = new GUIToolbar(position, _toolbarButtonStyle);
            var toolbar2 = new GUIToolbar(new Rect(position.x, position.y + 25, position.width, position.height), _toolbarButtonStyle, new GUIToolbar.Margin(-1, 3 + 24));
            var toolbar3 = new GUIToolbar(new Rect(position.x, position.y + 25, position.width, position.height), _toolbarButtonStyle, new GUIToolbar.Margin(-1, 3 + 2 * 24));

            GUIToolbar currentToolbar = toolbar;

            //left side (from left to right)
            currentToolbar.DrawDividerLeft(t_defaultButtonTexture);
            _selectedTool = currentToolbar.DrawToolbarLeft(_selectedTool, _toolbarTextures, 198);

            if (toolbarStage >= 3) currentToolbar = toolbar2;

            currentToolbar.DrawDividerLeft(t_defaultButtonTexture);

            if (currentToolbar.DrawButtonLeft(new GUIContent(t_actionTex_Undo, "Undo (Ctrl + Z)"))) Undo.PerformUndo();
            currentToolbar.DrawSpaceLeft();
            if (currentToolbar.DrawButtonLeft(new GUIContent(t_actionTex_Redo, "Redo (Ctrl + Y)"))) Undo.PerformRedo();
            currentToolbar.DrawSpaceLeft();
            if (currentToolbar.DrawButtonLeft(new GUIContent(t_actionTex_DeleteSelection, "Delete selected area (Delete)"))) DeleteSelection();
            currentToolbar.DrawSpaceLeft();
            if (currentToolbar.DrawButtonLeft(new GUIContent(t_actionTex_Copy, "Copy (Ctrl + C)"))) CopySelection();
            currentToolbar.DrawSpaceLeft();
            if (currentToolbar.DrawButtonLeft(new GUIContent(t_actionTex_Paste, "Paste (Ctrl + V)"))) StartPaste();

            if (toolbarStage >= 4) currentToolbar = toolbar3;
            else if (toolbarStage >= 2) currentToolbar = toolbar2;

            currentToolbar.DrawDividerLeft(t_defaultButtonTexture);

            if (currentToolbar.DrawButtonLeft(new GUIContent(t_actionTex_Lock, "Lock selection to prevent it from being edited (L)"))) LockSelection();
            currentToolbar.DrawSpaceLeft();
            if (currentToolbar.DrawButtonLeft(new GUIContent(t_actionTex_Unlock, "Unlock selection and allow editing it (U)"))) UnlockSelection();
            currentToolbar.DrawSpaceLeft();
            if (currentToolbar.DrawButtonLeft(new GUIContent(t_actionTex_PresetBlock, "Create a preset block of the selected area (P)"))) CreatePresetBlock();

            currentToolbar.DrawDividerLeft(t_defaultButtonTexture);

            _window_RecolorWindow.visible = currentToolbar.DrawDropdownLeft(_window_RecolorWindow.visible, new GUIContent(t_toolTex_Recolor, "Replace selection"));
            float recolorWindowX = currentToolbar.currentMargin.Left - _window_RecolorWindow.width;
            _window_RecolorWindow.position = new Vector2(recolorWindowX < 0 ? 0 : recolorWindowX, currentToolbar.currentMargin.Up + 20);


            //right side (front right to left)
            currentToolbar = toolbar;

            currentToolbar.DrawDividerRight(t_defaultButtonTexture);

            _window_ExportWindow.visible = currentToolbar.DrawDropdownRight(_window_ExportWindow.visible, new GUIContent(t_optionTex_Export, "Export options"));
            float exportWindowX = position.width - currentToolbar.currentMargin.Right - _window_ExportWindow.width + 38;
            _window_ExportWindow.position = new Vector2(exportWindowX < 0 ? 0 : exportWindowX, currentToolbar.currentMargin.Up + 20);

            if (toolbarStage >= 5) currentToolbar = toolbar2;

            currentToolbar.DrawDividerRight(t_defaultButtonTexture);

            _window_SettingsWindow.visible = currentToolbar.DrawDropdownRight(_window_SettingsWindow.visible, new GUIContent(t_optionTex_Settings, "Other Settings"));
            float settingsWindowX = position.width - currentToolbar.currentMargin.Right - _window_SettingsWindow.width + 38;
            _window_SettingsWindow.position = new Vector2(settingsWindowX < 0 ? 0 : settingsWindowX, currentToolbar.currentMargin.Up + 20);

            currentToolbar.DrawSpaceRight(); 
            _hideSprites = currentToolbar.DrawToggleRight(_hideSprites, new GUIContent(t_optionTex_HideSprites, "Hide sprites to see tiles below them"));
            currentToolbar.DrawSpaceRight();
            _lockWindows = currentToolbar.DrawToggleRight(_lockWindows, new GUIContent(t_optionTex_LockWindows, "Snap windows to the corners and lock them"));
            currentToolbar.DrawSpaceRight();
            _showRuler = currentToolbar.DrawToggleRight(_showRuler, new GUIContent(t_optionTex_Ruler, "Show the grid coordinates on the edge of the screen"));
            currentToolbar.DrawSpaceRight();
            _showModified = currentToolbar.DrawToggleRight(_showModified, new GUIContent(t_optionTex_Modified, "Highlights the cells which have been modified with a flashing outline"));

            if (toolbarStage >= 5) currentToolbar = toolbar3;
            else if (toolbarStage >= 2) currentToolbar = toolbar2;

            currentToolbar.DrawDividerRight(t_defaultButtonTexture);

            _file.settings.SetDisplaySpriteDrawer(currentToolbar.DrawToggleRight(_file.settings._displaySpriteDrawer, new GUIContent(t_optionTex_showSprites, "Show the sprite drawer")));
            if (_file.settings._useUniversalSpriteSettings)
            {
                currentToolbar.DrawSpaceRight(1);
                _file.settings.SetDisplayUniversalSpriteSettings(currentToolbar.DrawToggleRight(_file.settings._displayUniversalSpriteSettings, new GUIContent(t_optionTex_universalSpriteSettings, "Show the sprite override settings window")));
            }

            currentToolbar.DrawDividerRight(t_defaultButtonTexture);

            if (currentToolbar.DrawButtonRight(new GUIContent(t_optionTex_helpIcon, "Open documentation (opens browser)"))) Application.OpenURL("https://docs.vinark.dev/#/./better-rule-tiles/index");
        }
        #endregion

        #region Tile Drawer
        GUIStyle _iconButton;

        private Vector2 _tileDrawerScroll;
        private int _drawerSize { get => _file.settings._drawerSize; set => _file.settings._drawerSize = value; }
        private GUIContent[] _defaultTiles => new GUIContent[] {
            new GUIContent(t_tileTex_Ignore, "This tile will be ignored in the rule tile, this is the default option, use this to clear tiles on the grid"),
            new GUIContent(t_tileTex_Empty, "No tile should be placed in this place for the rule to be right"),
            new GUIContent(t_tileTex_NotSame, "A tile of the same type shouldn't be placed here for the rule to be right"),
            new GUIContent(t_tileTex_Any, "Any tile could be placed here for the rule to be right")
        };
        private string[] _defaultTileNames = { "Delete", "Empty", "Not Same", "Any tile" };
        private int _selectedDefaultTile
        {
            get
            {
                switch (_selectedDrawerTile)
                {
                    case -1: return 0;
                    case -2: return 1;
                    case -3: return 2;
                    case -4: return 3;
                    default: return -1;
                }
            }
            set
            {
                switch (value)
                {
                    case 0: _selectedDrawerTile = -1; break;
                    case 1: _selectedDrawerTile = -2; break;
                    case 2: _selectedDrawerTile = -3; break;
                    case 3: _selectedDrawerTile = -4; break;
                }
            }
        }

        Sprite _selectedSprite = null;
        Texture2D GetSelectedTileTex()
        {
            switch (_selectedDrawerTile)
            {
                case -1: return t_tileTex_Delete;
                case -2: return t_gridTex_Empty;
                case -3: return t_gridTex_NotSame;
                case -4: return t_gridTex_Any;
            }

            if (_selectedDrawerTile == 0)
            {
                //return _grid._spriteTextureCache[_selectedSprite];

                if (_selectedSprite != null && _selectedSprite.texture.isReadable)
                {
                
                    Rect rect = _selectedSprite.textureRect;
                    var colors = _selectedSprite.texture.GetPixels((int)rect.x, (int)rect.y, (int)rect.width, (int)rect.height);
                
                    Texture2D tex = new Texture2D((int)rect.width, (int)rect.height);
                    tex.SetPixels(colors);
                    tex.filterMode = FilterMode.Point;
                    tex.Apply();
                
                    return tex;
                }
                else return TextureUtils.CreateMissingTexture();
            }

            if (_selectedDrawerTile > 0)
            {
                return _file.GetTileTexture(_selectedDrawerTile - 1);
            }

            return t_emptyTexture;
        }
        bool _drawerCollapsed = false;

        void TileDrawerWindow(int windowID)
        {
            if (_iconButton == null) GetButtonStyle();

            //get values
            string[] drawerTileNames = _file.GetTileNames();

            //calculate values
            int scrollStart = 81;
            int numTiles = _file.Tiles.Count;
            int drawerTileWidth = numTiles == 1 ? 73 : (numTiles >= 6 ? 70 : 71);
            int numDefaultTiles = _defaultTiles.Length;
            int scrollRectWidth = numTiles * drawerTileWidth - 5 + numDefaultTiles * 70 + 12 + 85;

            //make styles
            GUIStyle selectedTileText = new GUIStyle("boldlabel");
            selectedTileText.alignment = TextAnchor.MiddleCenter;
            GUIStyle tileNameText = new GUIStyle("label");
            tileNameText.alignment = TextAnchor.LowerCenter;

            //set window properties
            _windows[windowID].width = _drawerCollapsed ? 80 : _drawerSize * 70 + 80 + 19;
            _windows[windowID].height = 115;
            _windows[windowID].lockPosition = _lockWindows;

            //show window title
            GUI.Label(new Rect(5, 0, 100, 25), "Selected", "boldlabel");
            GUI.Label(new Rect(scrollStart + 5, 0, 100, 25), "Tile Drawer", "boldlabel");

            //Before scroll rect
            GUI.Label(new Rect(5, 25, 70, 70), "", "button");
            GUI.DrawTexture(new Rect(5 + 7, 25 + 7, 56, 56), GetSelectedTileTex());
            //GUI.Label(new Rect(5, 95, 70, 20), "this tile", selectedTileText);

            //collapse
            if (GUI.Button(new Rect(_windows[windowID].width - 17, 4, 16, 16), _drawerCollapsed ? t_tileInfo_rightArrow : t_tileInfo_leftArrow, _iconButton))
            {
                _drawerCollapsed = !_drawerCollapsed;
            }
            if (_drawerCollapsed) return;

            //draw divider
            EditorGUI.DrawRect(new Rect(scrollStart - 1, 0, 1, _windows[windowID].height), c_backgroundColor);

            //start scroll
            _tileDrawerScroll = GUI.BeginScrollView(new Rect(scrollStart, 25, _windows[windowID].width - scrollStart, 88), _tileDrawerScroll, new Rect(0, 0, scrollRectWidth, 70), true, false);

            //draw default tool buttons
            _selectedDefaultTile = GUI.SelectionGrid(new Rect(5, 0, numDefaultTiles * 70, 70), _selectedDefaultTile, _defaultTiles, numDefaultTiles);
            for (int i = 0; i < _defaultTileNames.Length; i++)
            {
                Rect labelPos = new Rect(5 + i * 71, 0, 70, 65);
                GUI.Label(labelPos, _defaultTileNames[i], tileNameText);
            }
            //divider line
            EditorGUI.DrawRect(new Rect(numDefaultTiles * 70 + 11, 0, 1, 70), c_backgroundColor);
            //tiles buttons
            _selectedDrawerTile = GUI.SelectionGrid(new Rect(numDefaultTiles * 70 + 17, 0, numTiles * 70, 70), _selectedDrawerTile - 1, new string[_file.GetTileTextures().Length], numTiles) + 1;
            for (int i = 0; i < drawerTileNames.Length; i++)
            {
                Rect labelPos = new Rect(numDefaultTiles * 70 + 16 + i * drawerTileWidth, 0, 70, 65);
                GUI.Label(labelPos, drawerTileNames[i], tileNameText);

                Rect imagePos = new Rect(numDefaultTiles * 70 + 16 + i * drawerTileWidth + 19, 10, 34, 34);
                GUI.DrawTexture(imagePos, _file.GetTileTexture(i));
            }
            //add new tile button
            if (GUI.Button(new Rect(scrollRectWidth - 75, 0, 70, 70), new GUIContent("Add Tile", "Create a new tile")))
            {
                _file.CreateTile();
                _needsRepaint = true;
            }

            //end scroll
            GUI.EndScrollView();
            GUI.DragWindow();
        }
        #endregion

        #region Sprite Drawer
        Vector2 _spriteDrawerScroll;
        private int _drawerHeight { get => _file.settings._drawerHeight; set => _file.settings._drawerHeight = value; }
        private int _drawerCollumns { get => _file.settings._drawerCollumns; set => _file.settings._drawerCollumns = value; }
        private int _expandedDrawerCollumns { get => _file.settings._expandedDrawerCollumns; set => _file.settings._expandedDrawerCollumns = value; }
        bool _spriteDrawerCollapsed = true;
        private string _spriteFilter = "";

        void SpriteDrawerWindow(int windowID)
        {
            //create styles
            GUIStyle titleStyle = new GUIStyle(EditorStyles.boldLabel);
            titleStyle.alignment = TextAnchor.MiddleCenter;

            //title bar
            GUI.Label(new Rect(0, 0, _windows[windowID].width - 12, 25), "Sprites", titleStyle);
            EditorGUILayout.Space();

            //collapse
            if (GUI.Button(new Rect(_windows[windowID].width - 18, 4, 16, 16), _spriteDrawerCollapsed ? t_tileInfo_rightArrow : t_tileInfo_leftArrow, _iconButton))
            {
                _spriteDrawerCollapsed = !_spriteDrawerCollapsed;
            }

            //Search bar
            var searchRect = EditorGUILayout.GetControlRect();
            _spriteFilter = GUI.TextField(searchRect, _spriteFilter);
            GUI.DrawTexture(new Rect(searchRect.x + searchRect.width - 15, searchRect.y + 3, 12, 12), t_searchIcon);

            //get start pos of scrollrect
            var pos = EditorGUILayout.GetControlRect(GUILayout.MaxWidth(10));

            //variables
            int size = _drawerHeight;
            int spritesCount = _grid._sortedSpriteCache.Length;
            int collumns = _spriteDrawerCollapsed ? _drawerCollumns : _expandedDrawerCollumns;
            Vector2 scrollSize = new Vector2((spritesCount % collumns) * (size + 5) - 5, Mathf.CeilToInt((float)spritesCount / collumns) * (size + 5));

            //grid
            _spriteDrawerScroll = GUI.BeginScrollView(new Rect(pos.position, _windows[windowID].size - new Vector2(pos.x, pos.y + 2)), _spriteDrawerScroll, new Rect(pos.position, scrollSize));

            int s = 0;
            for (int i = 0; i < spritesCount; i++)
            {
                if (_spriteFilter == "" || _grid._sortedSpriteCache[i].Key.name.ToLower().Contains(_spriteFilter.ToLower()))
                {
                    int row = s / collumns;
                    int collumn = s % collumns;

                    Rect rect = new Rect(pos.position + new Vector2(collumn * (size + 5), row * (size + 5)), Vector2.one * size);
                    DrawNextSpriteCell(rect, i);

                    s++;
                }
            }

            GUI.EndScrollView();

            //window properties
            int scrollBarWidth = scrollSize.y < _windows[windowID].height - pos.y ? 3 : 16;
            _windows[windowID].lockPosition = true;
            _windows[windowID].width = collumns * (size + 5) + scrollBarWidth;
            _windows[windowID].padding.top = (int)_window_Toolbar.height + 4;
        }

        void DrawNextSpriteCell(Rect rect, int spriteCellIndex)
        {
            if (_grid._sortedSpriteCache[spriteCellIndex].Value == null) _grid.CacheSprite(_grid._sortedSpriteCache[spriteCellIndex].Key);
            var tex = _grid._sortedSpriteCache[spriteCellIndex].Value;

            Vector2 aspect = tex.width > tex.height ? new Vector2(1, (float)tex.height / tex.width) : (tex.width < tex.height ? new Vector2((float)tex.width / tex.height, 1) : Vector2.one);

            if (GUI.Button(rect, new GUIContent("", _grid._sortedSpriteCache[spriteCellIndex].Key.name)))
            {
                SelectSprite(_grid._sortedSpriteCache[spriteCellIndex].Key);
            }
            GUI.DrawTexture(new Rect(
                rect.position + rect.size * .1f + rect.size * (Vector2.one - aspect) * .4f,
                rect.size * .8f * aspect
                ), tex);

            //spriteCellIndex++;
            //return spriteCellIndex >= _grid._spriteDrawerContents.Count;
        }

        void SelectSprite(Sprite sprite, bool selectBrush = true, bool collapseSpriteDrawer = true)
        {
            _selectedDrawerTile = 0;
            if (selectBrush) _selectedTool = 0;
            if (collapseSpriteDrawer) _spriteDrawerCollapsed = true;
            _selectedSprite = sprite;
        }
        #endregion

        #region Universal Sprite Settings

        Vector2 _universalSpriteSettingsScrollPosition;
        int _currentlySepectedSpriteToModify = -1;
        float _universalSpriteSettingAddedHeight = 0;
        float _universalSpriteSettingDialogHeight = 0;
        bool _showUniversalSpritesArray = false;
        bool _autoScrollToSelectedOverrideSprite = false;

        Rect _spriteSettingsNoDropZone = new Rect();

        void UniversalSpriteSettingsWindow(int windowID)
        {
            //create styles
            GUIStyle titleStyle = new GUIStyle(EditorStyles.boldLabel);
            titleStyle.alignment = TextAnchor.MiddleCenter;

            //title bar
            GUI.Label(new Rect(0, 0, _windows[windowID].width - 12, 25), "Sprite Override Settings", titleStyle);
            EditorGUILayout.Space();

            //separator
            EditorGUI.DrawRect(new Rect(0, 25, _windows[windowID].height, 1), c_backgroundColor);

            //const values
            const float margin = 5;
            const float spacing = 5;
            const int columns = 4;

            if (_currentlySepectedSpriteToModify < 0)
            {
                _universalSpriteSettingAddedHeight = 0;
                _spriteSettingsNoDropZone = new Rect();
            }

            //if there are no overrides
            if (_file._overrideSprites.Count <= 0)
            {
                EditorGUILayout.HelpBox("Drag in sprites to this window to modify their output settings. Every rule using this sprite will also use these sprite output and collider settings.", MessageType.Info);
                return;
            }

            //calculate scroll position
            Rect windowPos = new Rect(_windows[windowID].position, _windows[windowID].size);
            Rect scrollRect = new Rect(0, 26, windowPos.width - 2, windowPos.height - 28);

            float scrollViewWidth = windowPos.width - 15;

            float currentY = margin;
            float columnWidth = (scrollViewWidth - (2 * margin) - ((columns - 1) * spacing)) / columns;

            float scrollViewHeight =
                (Mathf.Ceil(_file._overrideSprites.Count / (float)columns) * (columnWidth + spacing) - spacing + (2 * margin)) +
                (_currentlySepectedSpriteToModify >= 0 ? 
                _universalSpriteSettingAddedHeight + spacing : spacing);

            Rect scrollView = new Rect(0, 0, scrollViewWidth, scrollViewHeight);
            _universalSpriteSettingsScrollPosition = GUI.BeginScrollView(scrollRect, _universalSpriteSettingsScrollPosition, scrollView, false, true);

            //scroll to selected sprite
            if (_currentlySepectedSpriteToModify >= 0 && _autoScrollToSelectedOverrideSprite)
            {
                _universalSpriteSettingsScrollPosition = new Vector2(0, (_currentlySepectedSpriteToModify / columns) * (columnWidth + spacing));
                _autoScrollToSelectedOverrideSprite = false;
            }

            //draw sprites
            for (int i = 0; i < _file._overrideSprites.Count; i++)
            {
                if (!_grid._spriteTextureCache.ContainsKey(_file._overrideSprites[i].BaseSprite)) _grid.CacheSprite(_file._overrideSprites[i].BaseSprite);

                //draw square
                Rect buttonPos = new Rect(margin + ((i % columns) * (columnWidth + spacing)), currentY, columnWidth, columnWidth);
                Rect imgPos = new Rect(buttonPos.x + 8, buttonPos.y + 8, buttonPos.width - 16, buttonPos.height - 16);

                var pressedButton = GUI.Button(buttonPos, new GUIContent());
                if (_currentlySepectedSpriteToModify == i) GUI.DrawTexture(buttonPos, t_windowBorderTexture, ScaleMode.StretchToFill, true, 0, Color.white, 0, 3);
                GUI.DrawTexture(imgPos, _grid._spriteTextureCache[_file._overrideSprites[i].BaseSprite]);

                if (pressedButton)
                {
                    //select
                    if (_currentlySepectedSpriteToModify != i)
                    {
                        _currentlySepectedSpriteToModify = i;
                        SelectSprite(_file._overrideSprites[i].BaseSprite, true, false);
                    }
                    //deselect
                    else _currentlySepectedSpriteToModify = -1;
                }

                //draw UI
                if (_currentlySepectedSpriteToModify == i)
                {
                    //draw UI
                    var optionsRect = new Rect(margin, currentY + columnWidth + spacing, scrollViewWidth - 2 * margin, 0);
                    _universalSpriteSettingAddedHeight = DrawSpriteOptionsUI(optionsRect, _currentlySepectedSpriteToModify);

                    //calculate a no-drop zone for drag and dropping
                    _spriteSettingsNoDropZone = new Rect(
                        _windows[windowID].position + scrollRect.position + optionsRect.position - _universalSpriteSettingsScrollPosition,
                        new Vector2(optionsRect.width, _universalSpriteSettingAddedHeight)
                        );
                }

                //after the last column
                if (i % columns == columns - 1) 
                {
                    //skip to next row
                    currentY += columnWidth + spacing;
                    //if the selected one is in this row, also skip that amount
                    if (_currentlySepectedSpriteToModify >= 0 && _currentlySepectedSpriteToModify / columns == i / columns) currentY += _universalSpriteSettingAddedHeight + 5;
                }
            }

            GUI.EndScrollView();

            _windows[windowID].lockPosition = true;
            _windows[windowID].padding.top = (int)_window_Toolbar.height + 4;
        }

        float DrawSpriteOptionsUI(Rect rect, int spriteIndex)
        {
            //calculate height beforehand
            float height = _universalSpriteSettingDialogHeight;
            _universalSpriteSettingDialogHeight = 0;
            float currentOffset = 25;



            //display background
            float returned = guiBuilder.DrawBackground(rect, new GUIContent(_file._overrideSprites[spriteIndex].BaseSprite.name), height).height;
            if (GUI.Button(new Rect(rect.width - 17, rect.y + 2, 20, 16), "✕") && EditorUtility.DisplayDialog("Delete override?", "Are you sure you want to delete this sprite override?", "Yes", "Cancel"))
            {
                var toDelete = _file._overrideSprites[spriteIndex];
                _file._overrideSprites.Remove(toDelete);
                _currentlySepectedSpriteToModify = -1;
                return 0;
            }

            //display the UI
            _file._overrideSprites[spriteIndex].GameObject = (GameObject)EditorGUI.ObjectField(GetCurrentRect(), "Gameobject", _file._overrideSprites[spriteIndex].GameObject, typeof(GameObject), false);
            _file._overrideSprites[spriteIndex].ColliderType = (Tile.ColliderType)EditorGUI.EnumPopup(GetCurrentRect(), "Collider type", _file._overrideSprites[spriteIndex].ColliderType);
            _file._overrideSprites[spriteIndex].OutputSprite = (ExtendedOutputSprite)EditorGUI.EnumPopup(GetCurrentRect(), new GUIContent("Output"), _file._overrideSprites[spriteIndex].OutputSprite);
            if (_file._overrideSprites[spriteIndex].OutputSprite != ExtendedOutputSprite.Single) currentOffset += 10;

            switch (_file._overrideSprites[spriteIndex].OutputSprite)
            {
                case ExtendedOutputSprite.Random:
                    EditorGUI.LabelField(GetCurrentRect(), "Random tile settings", EditorStyles.boldLabel);
                    _file._overrideSprites[spriteIndex].NoiseScale = EditorGUI.Slider(GetCurrentRect(), "Noise", _file._overrideSprites[spriteIndex].NoiseScale, 0.001f, 0.999f);
                    _file._overrideSprites[spriteIndex].RandomTransform = (RuleTile.TilingRuleOutput.Transform)EditorGUI.EnumPopup(GetCurrentRect(), "Shuffle", _file._overrideSprites[spriteIndex].RandomTransform);
                    break;
                case ExtendedOutputSprite.Animation:
                    EditorGUI.LabelField(GetCurrentRect(), "Animation settings", EditorStyles.boldLabel);
                    _file._overrideSprites[spriteIndex].MinAnimationSpeed = EditorGUI.FloatField(GetCurrentRect(), "Min speed", _file._overrideSprites[spriteIndex].MinAnimationSpeed);
                    _file._overrideSprites[spriteIndex].MaxAnimationSpeed = EditorGUI.FloatField(GetCurrentRect(), "Max speed", _file._overrideSprites[spriteIndex].MaxAnimationSpeed);
                    break;
                case ExtendedOutputSprite.Pattern:
                    EditorGUI.LabelField(GetCurrentRect(), "Pattern settings", EditorStyles.boldLabel);
                    _file._overrideSprites[spriteIndex].PatternSize = EditorGUI.Vector2IntField(GetCurrentRect(40), "Pattern size", _file._overrideSprites[spriteIndex].PatternSize);
                    //set sizes based on the value above
                    if (_file._overrideSprites[spriteIndex].PatternSize.x < 1) _file._overrideSprites[spriteIndex].PatternSize.x = 1;
                    if (_file._overrideSprites[spriteIndex].PatternSize.y < 1) _file._overrideSprites[spriteIndex].PatternSize.y = 1;
                    int size = _file._overrideSprites[spriteIndex].PatternSize.x * _file._overrideSprites[spriteIndex].PatternSize.y;
                    if (size != _file._overrideSprites[spriteIndex].Sprites.Length) Array.Resize(ref _file._overrideSprites[spriteIndex].Sprites, size);
                    break;
                default:
                    break;
            }

            if (_file._overrideSprites[spriteIndex].OutputSprite != ExtendedOutputSprite.Single)
            {
                //space
                currentOffset += 10;
                EditorGUI.LabelField(GetCurrentRect(), "Output sprites", EditorStyles.boldLabel);

                //display a list using a custom made editor field
                _file._overrideSprites[spriteIndex].Sprites = EditorGUIField<Sprite>.ArrayField(GetCurrentRect(0), "Sprites", ref _showUniversalSpritesArray, _file._overrideSprites[spriteIndex].Sprites, typeof(Sprite), out float arrayHeight);
                currentOffset += arrayHeight;
            }

            //display pattern
            if (_file._overrideSprites[spriteIndex].OutputSprite == ExtendedOutputSprite.Pattern)
            {
                currentOffset += 10;
                currentOffset += DisplayPatternGrid(GetWideCurrentRect(), _file._overrideSprites[spriteIndex].PatternSize, _file._overrideSprites[spriteIndex].Sprites) + 13;
            }


            //return background height
            _universalSpriteSettingDialogHeight = currentOffset - 15;
            return returned;



            //local methods
            Rect GetCurrentRect(float h = 20)
            {
                Rect r = new Rect(rect.x + 5, rect.y + currentOffset, rect.width - 10, h - 2);
                currentOffset += h;
                return r;
            }
            Rect GetWideCurrentRect(float h = 20)
            {
                Rect r = new Rect(rect.x, rect.y + currentOffset, rect.width, h - 2);
                currentOffset += h;
                return r;
            }
        }
        #endregion

        #region Tile info
        private int p_selectedDrawerTile = int.MinValue;
        private int _selectedDrawerTile
        {
            get => p_selectedDrawerTile;
            set
            {
                if (p_selectedDrawerTile == value) return;
                if (p_selectedDrawerTile > 0) UpdateSelectedTile();

                if (value > 0)
                {
                    _inspectingCell = null;

                    _tileInfo_Name = _file.Tiles[value - 1].Name;
                    _tileInfo_Color = _file.Tiles[value - 1].Color;
                    _tileInfo_Texture = _file.Tiles[value - 1].Texture;
                    _tileInfo_Sprite = _file.Tiles[value - 1].DefaultSprite;
                    _tileInfo_ColliderType = _file.Tiles[value - 1].ColliderType;
                    _tileInfo_GameObject = _file.Tiles[value - 1].DefaultGameObject;
                    _tileInfo_Shape = _file.Tiles[value - 1].TextureShape;
                    _tileInfo_MirrorTexX = _file.Tiles[value - 1].MirrorTexX;
                    _tileInfo_MirrorTexY = _file.Tiles[value - 1].MirrorTexY;
                    _tileInfo_Unique = _file.Tiles[value - 1].uniqueTile;
                    _tileInfo_VariationOf = _file.Tiles[value - 1].variationOf;
                    _tileInfo_Variations = _file.Tiles[value - 1].variations;
                    _tileInfo_CustomProperties = _file.Tiles[value - 1].customProperties;
                }

                if (value != 0 && _selectedTool > 1) _selectedTool = 0;

                p_selectedDrawerTile = value;
            }
        }

        string _tileInfo_Name;
        Color _tileInfo_Color;
        Texture2D _tileInfo_Texture;
        Sprite _tileInfo_Sprite;
        Tile.ColliderType _tileInfo_ColliderType;
        GameObject _tileInfo_GameObject;
        BetterRuleTileContainer.TileShape _tileInfo_Shape;
        bool _tileInfo_MirrorTexX;
        bool _tileInfo_MirrorTexY;
        bool _tileInfo_Unique;
        int _tileInfo_VariationOf;
        List<int> _tileInfo_Variations;
        List<CustomTileProperty> _tileInfo_CustomProperties;

        Vector2 _tile_scrollPos;
        int _tile_selectedVariationTile;
        bool _inspector_collapsed = false;
        void TileInfoWindow(int windowID)
        {
            //create styles
            GUIStyle titleStyle = new GUIStyle(EditorStyles.boldLabel);
            titleStyle.alignment = TextAnchor.MiddleCenter;

            //title
            GUI.Label(new Rect(0, 0, _windows[windowID].width, 25), $"Tile info: \"{_file.GetTileName(_selectedDrawerTile - 1)}\"", titleStyle);

            //collapse
            if (GUI.Button(new Rect(_windows[windowID].width - 20, 3, 16, 16), _inspector_collapsed ? t_tileInfo_upArrow : t_tileInfo_downArrow, _iconButton))
            {
                _inspector_collapsed = !_inspector_collapsed;
                _windows[windowID].height = _inspector_collapsed ? 25 : 400;
                _windows[windowID].width = 300;
            }
            if (_inspector_collapsed) return;

            //set up scrollbar
            _tile_scrollPos = EditorGUILayout.BeginScrollView(_tile_scrollPos);

            //draw editor options
            guiBuilder.DrawInBackground(new GUIContent("Editor options", "Change how the tile appears in the editor window"), 2, (r) =>
            {
                _tileInfo_Name = EditorGUILayout.TextField("Tile name", _tileInfo_Name);
                _tileInfo_Texture = EditorGUILayout.ObjectField("Tile image", _tileInfo_Texture, typeof(Texture2D), false, GUILayout.Height(EditorGUIUtility.singleLineHeight)) as Texture2D;
            });
            EditorGUILayout.Space();

            //if (_tileInfo_Texture != null && !_tileInfo_Texture.isReadable) EditorGUILayout.HelpBox("This texture is not readable, therefore some functionality may not be available for this image", MessageType.Warning);
            if (_tileInfo_Texture == null)
            {
                guiBuilder.DrawInBackground(new GUIContent("Auto texture", "If you didn't specify a tile image in the \"Editor options\" section, you can change the values of the automatically generated image here"), 4, (r) =>
                {
                    _tileInfo_Color = EditorGUILayout.ColorField("Tile color", _tileInfo_Color);
                    _tileInfo_Shape = (BetterRuleTileContainer.TileShape)EditorGUILayout.EnumPopup("Tile shape", _tileInfo_Shape);
                    _tileInfo_MirrorTexX = EditorGUILayout.Toggle("Mirror X", _tileInfo_MirrorTexX);
                    _tileInfo_MirrorTexY = EditorGUILayout.Toggle("Mirror Y", _tileInfo_MirrorTexY);
                }); 
                EditorGUILayout.Space();
            }

            //rule tile options
            guiBuilder.DrawInBackground(new GUIContent("Rule tile options", "Specify the default options of the rule tile"), 3, (r) =>
            {
                _tileInfo_Sprite = EditorGUILayout.ObjectField("Default sprite", _tileInfo_Sprite, typeof(Sprite), false, GUILayout.Height(EditorGUIUtility.singleLineHeight)) as Sprite;
                _tileInfo_ColliderType = (Tile.ColliderType)EditorGUILayout.EnumPopup("Default collider", _tileInfo_ColliderType);
                _tileInfo_GameObject = EditorGUILayout.ObjectField("Default gameobject", _tileInfo_GameObject, typeof(GameObject), false, GUILayout.Height(EditorGUIUtility.singleLineHeight)) as GameObject;
            });
            EditorGUILayout.Space();

            //variations
            guiBuilder.DrawInBackground(new GUIContent("Tile variation", "Change whether this tile is unique or a variation of another one. If a tile is a variation of another tile, it will autofill all missing rules from the tile specified"), _tileInfo_Unique ? 1 : 2, (r) =>
            {
                _tileInfo_Unique = EditorGUILayout.Toggle(new GUIContent("Unique tile", "Is this tile unique, or a variation of another tile?"), _tileInfo_Unique);
                if (!_tileInfo_Unique)
                {
                    int varIndex = _file.Tiles.FindIndex(t => t.UniqueID == _tileInfo_VariationOf);
                    varIndex = EditorGUILayout.Popup(new GUIContent("Variation of",
                        //"If a tile is a variation of another, that other tile will treat this if it was the same. But this tile can have separate rules for interacting with itself, and separate rules when interacting with it's parent. This is a good option if you want to make sloped variations of existing tiles."
                        "If a tile is a variation of another tile, it will autofill all missing rules from the tile specified here"
                        ), varIndex, _file.GetTileNames());
                    if (varIndex >= 0) _tileInfo_VariationOf = _file.Tiles[varIndex].UniqueID;
                }
            });
            EditorGUILayout.Space();

            //connection selection
            guiBuilder.DrawInBackground(new GUIContent("Connect to", "The tile will connect these tiles as it was the same tile"), _tileInfo_Variations.Count, (r) =>
            {
                int varIndex2 = _file.Tiles.FindIndex(t => t.UniqueID == _tile_selectedVariationTile);
                varIndex2 = EditorGUI.Popup(new Rect(r.x + r.width - 135, r.y + 1, 80, 18), varIndex2, _file.GetTileNamesSorted());
                bool addButton = GUI.Button(new Rect(r.x + r.width - 51, r.y + 1, 50, 18), "Add");

                if (varIndex2 >= 0) _tile_selectedVariationTile = _file.Tiles[varIndex2].UniqueID;
                if (addButton && !_tileInfo_Variations.Contains(varIndex2 + 1)) _tileInfo_Variations.Add(varIndex2 + 1);

                foreach (var item in _tileInfo_Variations)
                {
                    EditorGUILayout.BeginHorizontal();
                    var tile = _file.Tiles.Find(t => t.UniqueID == item);
                    EditorGUILayout.LabelField(" ", tile != null ? tile.Name : "Deleted");
                    if (GUILayout.Button("✕", GUILayout.Width(20)))
                    {
                        _tileInfo_Variations.Remove(item);
                        break;
                    }
                    EditorGUILayout.EndHorizontal();
                }
            }, 21f, 3, -6);
            EditorGUILayout.Space();

            //custom properties
            guiBuilder.DrawInBackground(new GUIContent("Custom properties", "Custom properties can be accessed by scripts to load custom data from the tiles"), _tileInfo_CustomProperties.Count, (r) =>
            {
                bool addButton = GUI.Button(new Rect(r.x + r.width - 51, r.y + 1, 50, 18), "Add");
                if (addButton) _tileInfo_CustomProperties.Add(new CustomTileProperty());

                for (int i = 0; i < _tileInfo_CustomProperties.Count; i++)
                {
                    var item = _tileInfo_CustomProperties[i];

                    EditorGUILayout.BeginHorizontal();
                    item._key = EditorGUILayout.TextField(new GUIContent("", "Enter the key which you'll use to access this variable in script"), item._key, GUILayout.Width(80));
                    item._type = (CustomTileProperty.Type)EditorGUILayout.EnumPopup(item._type, GUILayout.Width(80));

                    switch (item._type)
                    {
                        case CustomTileProperty.Type.Int:
                            item._val_int = EditorGUILayout.IntField(item._val_int);
                            break;
                        case CustomTileProperty.Type.Float:
                            item._val_float = EditorGUILayout.FloatField(item._val_float);
                            break;
                        case CustomTileProperty.Type.Double:
                            item._val_double = EditorGUILayout.DoubleField(item._val_double);
                            break;
                        case CustomTileProperty.Type.Char:
                            item._val_char = EditorGUILayout.TextField($"{item._val_char}")[0];
                            break;
                        case CustomTileProperty.Type.String:
                            item._val_string = EditorGUILayout.TextField(item._val_string);
                            break;
                        case CustomTileProperty.Type.Bool:
                            item._val_bool = EditorGUILayout.Toggle(item._val_bool);
                            break;
                        default:
                            break;
                    }

                    if (GUILayout.Button("✕", GUILayout.Width(20))) _tileInfo_CustomProperties.Remove(item);
                    EditorGUILayout.EndHorizontal();
                }
            }, lineHeight: 21f, adjustHeight: -4);
            EditorGUILayout.Space();


            EditorGUILayout.EndScrollView();
            GUILayout.Space(30);

            //buttons
            if (GUI.Button(new Rect(5, _windows[windowID].height - 25, _windows[windowID].width - 35, 19), "Apply Changes")) UpdateSelectedTile();
            if (GUI.Button(new Rect(_windows[windowID].width - 25, _windows[windowID].height - 25, 20, 19), new GUIContent("✕", "Delete Tile")) &&
                EditorUtility.DisplayDialog("Deleting tile.", "Are you sure you want to delete this tile?", "Yes", "Cancel"))
            {
                int index = _selectedDrawerTile - 1;
                _selectedDrawerTile = int.MinValue;
                _file.DeleteTile(_file.Tiles[index]);
            }

            //lock position
            _windows[windowID].lockPosition = _lockWindows;

            //move window
            if (!_lockWindows) GUI.DragWindow();
        }


        public void DrawGUIBackground(Rect rect, GUIContent title)
        {
            //draw background
            GUI.DrawTexture(rect, t_windowBorderTexture, ScaleMode.StretchToFill, true, 0, Color.white, 0, 5);
            GUI.DrawTexture(rect, t_backgroundTexture, ScaleMode.StretchToFill, true, 0, Color.white, 1, 5);
            GUI.DrawTexture(new Rect(rect.position, new Vector2(rect.width, 20)), t_fieldBoxTexture, ScaleMode.StretchToFill, true, 0, Color.white, 0, 5);
            GUI.DrawTexture(new Rect(rect.position, new Vector2(rect.width, 20)), t_backgroundTexture, ScaleMode.StretchToFill, true, 0, Color.white, 1, 5);
            GUI.Label(new Rect(rect.position + new Vector2(5, 0), new Vector2(rect.width, 20)), title);
        }

        void UpdateSelectedTile()
        {
            _file.ModifyTile(
                _selectedDrawerTile - 1,
                _tileInfo_Name,
                _tileInfo_Color,
                _tileInfo_Texture,
                _tileInfo_Sprite,
                _tileInfo_ColliderType,
                _tileInfo_GameObject,
                _tileInfo_Shape,
                _tileInfo_MirrorTexX,
                _tileInfo_MirrorTexY,
                _tileInfo_Unique,
                _tileInfo_VariationOf,
                _tileInfo_Variations,
                _tileInfo_CustomProperties
                );
        }
#endregion

        #region Grid cell info
        //public Sprite[] _gridCellSprites = new Sprite[0];
        public Vector2 _gridCellViewScroll;
        bool _gridCellCollapsed = false;
        bool _showSpritesArray = false;
        void GridCellInfoWindow(int windowID)
        {
            if (_inspectingCell == null) return;

            //create styles
            GUIStyle titleStyle = new GUIStyle(EditorStyles.boldLabel);
            titleStyle.alignment = TextAnchor.MiddleCenter;

            //title
            GUI.Label(new Rect(0, 0, _windows[windowID].width, 25), $"Cell info: {_inspectingCell.Position} - {(_inspectingCell.TileID < 1 ? GetRuleName(_inspectingCell.TileID) : _file.Tiles.Find(t => t.UniqueID == _inspectingCell.TileID).Name)}", titleStyle);

            //collapse
            if (GUI.Button(new Rect(_windows[windowID].width - 20, 3, 16, 16), _gridCellCollapsed ? t_tileInfo_upArrow : t_tileInfo_downArrow, _iconButton))
            {
                _gridCellCollapsed = !_gridCellCollapsed;
                _windows[windowID].height = _gridCellCollapsed ? 25 : 400;
                _windows[windowID].width = 300;
            }
            if (_gridCellCollapsed) return;

            //scroll rect setup
            _gridCellViewScroll = EditorGUILayout.BeginScrollView(_gridCellViewScroll);

            //default settings
            EditorGUILayout.Space();
            _inspectingCell.Sprite = (Sprite)EditorGUILayout.ObjectField("Display sprite", _inspectingCell.Sprite, typeof(Sprite), false, GUILayout.Height(EditorGUIUtility.singleLineHeight));

            //check universal sprite drawer usage
            if (_file.settings._useUniversalSpriteSettings)
            {
                EditorGUILayout.Space();
                EditorGUILayout.HelpBox("Universal sprite settings is enabled, change the sprite settings in the \"Sprite Override Settings\" window", MessageType.Info);
                if (!_file._overrideSprites.Exists(t => t.BaseSprite == _inspectingCell.Sprite))
                {
                    if (GUILayout.Button("Add sprite to overrides"))
                    {
                        _file._overrideSprites.Add(new BetterRuleTileContainer.UniversalSpriteData(_inspectingCell.Sprite));
                        _file.settings.SetDisplayUniversalSpriteSettings(true);
                    }
                }
                else
                {
                    if (GUILayout.Button("Open sprite override settings"))
                    {
                        _currentlySepectedSpriteToModify = _file._overrideSprites.FindIndex(t => t.BaseSprite == _inspectingCell.Sprite);
                        _autoScrollToSelectedOverrideSprite = true;
                        _file.settings.SetDisplayUniversalSpriteSettings(true);
                    }
                }
            }
            //if not using the universal settings display the default options
            else DrawCellSpriteOptions();


            //label
            EditorGUILayout.Space();

            //if cell is in a preset block
            var presetblock = _file._presetBlocks.Find(b => b.InBounds(_inspectingCell.Position));
            if (presetblock != null)
            {
                guiBuilder.DrawTitleBar(new GUIContent("Neighbor positions"));
                GUILayout.Space(3);
                presetblock.BlockTransform = (RuleTile.TilingRuleOutput.Transform)EditorGUILayout.EnumPopup("Transform", presetblock.BlockTransform);
                EditorGUILayout.Space();

                EditorGUILayout.HelpBox("This tile is part of a preset block. To change which neighbors to check for, remove the preset block.", MessageType.Info);

                if (GUILayout.Button("Delete preset block")) _file.DeletePresetBlock(_inspectingCell.Position);
            }
            //
            else
            {
                var guiSize = _grid.DrawInteractiveMiniGrid(EditorGUILayout.GetControlRect(), _inspectingCell);
                GUILayout.Space(guiSize.height);
            }

            //end scroll
            EditorGUILayout.EndScrollView();

            //check if it was modified
            _inspectingCell.IsModified = _inspectingCell.CheckModified();

            //lock position
            _windows[windowID].lockPosition = _lockWindows;
            //move window
            if (!_lockWindows) GUI.DragWindow();
        }

        void DrawCellSpriteOptions()
        {
            _inspectingCell.UseDefaultSettings = EditorGUILayout.Toggle("Use default settings", _inspectingCell.UseDefaultSettings);
            if (!_inspectingCell.UseDefaultSettings)
            {
                _inspectingCell.GameObject = (GameObject)EditorGUILayout.ObjectField("Gameobject", _inspectingCell.GameObject, typeof(GameObject), false, GUILayout.Height(EditorGUIUtility.singleLineHeight));
                _inspectingCell.ColliderType = (Tile.ColliderType)EditorGUILayout.EnumPopup("Collider type", _inspectingCell.ColliderType);
            }

            //output
            _inspectingCell.OutputSprite = (ExtendedOutputSprite)EditorGUILayout.EnumPopup("Output", _inspectingCell.OutputSprite);
            if (_inspectingCell.OutputSprite != ExtendedOutputSprite.Single)
            {
                bool hexGrid = _file.settings._gridShape == BetterRuleTileContainer.GridShape.HexagonalPointedTop || _file.settings._gridShape == BetterRuleTileContainer.GridShape.HexagonalFlatTop;
                bool hexPattern = hexGrid && _inspectingCell.OutputSprite == ExtendedOutputSprite.Pattern;

                EditorGUILayout.Space();
                if (_inspectingCell.OutputSprite == ExtendedOutputSprite.Animation)
                {
                    GUILayout.Label("Animation settings", EditorStyles.boldLabel);
                    _inspectingCell.MinAnimationSpeed = EditorGUILayout.FloatField("Min speed", _inspectingCell.MinAnimationSpeed);
                    _inspectingCell.MaxAnimationSpeed = EditorGUILayout.FloatField("Max speed", _inspectingCell.MaxAnimationSpeed);
                }
                if (_inspectingCell.OutputSprite == ExtendedOutputSprite.Random)
                {
                    GUILayout.Label("Random tile settings", EditorStyles.boldLabel);
                    _inspectingCell.NoiseScale = EditorGUILayout.Slider("Noise", _inspectingCell.NoiseScale, 0.001f, 0.999f);
                    _inspectingCell.RandomTransform = (RuleTile.TilingRuleOutput.Transform)EditorGUILayout.EnumPopup("Shuffle", _inspectingCell.RandomTransform);
                }
                if (_inspectingCell.OutputSprite == ExtendedOutputSprite.Pattern && !hexGrid)
                {
                    GUILayout.Label("Pattern settings", EditorStyles.boldLabel);

                    //
                    _inspectingCell.PatternSize = EditorGUILayout.Vector2IntField("Pattern size", _inspectingCell.PatternSize);
                    if (_inspectingCell.PatternSize.x < 1) _inspectingCell.PatternSize.x = 1;
                    if (_inspectingCell.PatternSize.y < 1) _inspectingCell.PatternSize.y = 1;

                    int size = _inspectingCell.PatternSize.x * _inspectingCell.PatternSize.y;
                    if (size != _inspectingCell.Sprites.Length) Array.Resize(ref _inspectingCell.Sprites, size);
                }
                else if (hexPattern)
                {
                    GUILayout.Label("Pattern settings", EditorStyles.boldLabel);
                    GUILayout.Label("Hexagonal tiles are not compatible with patterns.");

                    return;
                }

                //space
                EditorGUILayout.Space();
                GUILayout.Label("Output sprites", EditorStyles.boldLabel);

                //display a list using a custom made editor field
                _inspectingCell.Sprites = EditorGUIField<Sprite>.ArrayField("Sprites", ref _showSpritesArray, _inspectingCell.Sprites, typeof(Sprite));

                //display pattern
                if (_inspectingCell.OutputSprite == ExtendedOutputSprite.Pattern) GUILayout.Space(DisplayPatternGrid(EditorGUILayout.GetControlRect(), _inspectingCell.PatternSize, _inspectingCell.Sprites));

                if (_inspectingCell.OutputSprite != ExtendedOutputSprite.Pattern) _inspectingCell.IncludeSpriteInOutput = EditorGUILayout.Toggle(new GUIContent("Include default sprite", "Add default sprite to the start of the array when generating the tile?"), _inspectingCell.IncludeSpriteInOutput);
                else _inspectingCell.IncludeSpriteInOutput = false;
            }
        }

        float _configWindowWidth = 0;
        float DisplayPatternGrid(Rect defaultRect, Vector2Int PatternSize, Sprite[] Sprites)
        {
            //get background rect
            if (defaultRect.width > 1) _configWindowWidth = defaultRect.width;

            Rect rect = new Rect(defaultRect.x, defaultRect.y + 6, _configWindowWidth, defaultRect.height);

            //set
            int columns = PatternSize.x;
            int rows = PatternSize.y;
            const float spacing = 2;
            float xOffset = 11;

            //
            float tileSize = (rect.width - 22 - (columns - 1) * spacing) / columns;
            if (tileSize > 40)
            {
                xOffset += columns * (tileSize - 40) / 2;
                tileSize = 40;
            }

            //set background height
            rect.height = (tileSize + spacing) * rows + 36;

            //draw background 
            GUI.DrawTexture(rect, t_windowBorderTexture, ScaleMode.StretchToFill, true, 0, Color.white, 0, 5);
            GUI.DrawTexture(rect, t_backgroundTexture, ScaleMode.StretchToFill, true, 0, Color.white, 1, 5);
            GUI.DrawTexture(new Rect(rect.position, new Vector2(rect.width, 20)), t_fieldBoxTexture, ScaleMode.StretchToFill, true, 0, Color.white, 0, 5);
            GUI.DrawTexture(new Rect(rect.position, new Vector2(rect.width, 20)), t_backgroundTexture, ScaleMode.StretchToFill, true, 0, Color.white, 1, 5);
            GUI.Label(new Rect(rect.position + new Vector2(5, 0), new Vector2(rect.width, 20)), new GUIContent($"Pattern preview ({PatternSize.x * PatternSize.y} sprites)", "Colors:\n\n" +
                $"Gray:\t Sprites list is not the correct size!\n" +
                $"Red:\t Sprite is not set!\n" +
                $"Yellow:\t Sprite is not read and write enabled!"));

            int l = Sprites.Length;

            //
            for (int y = 0, i = 0; y < PatternSize.y; y++)
            {
                for (int x = 0; x < columns; x++)
                {
                    Rect cellRect = new Rect(rect.x + xOffset + x * (spacing + tileSize), rect.y + 30 + y * (spacing + tileSize), tileSize, tileSize);

                    if (l > i && Sprites[i] != null)
                    {
                        if (Sprites[i].texture.isReadable)
                        {
                            Rect slice = Sprites[i].rect;
                            Color[] cols = Sprites[i].texture.GetPixels((int)slice.x, (int)slice.y, (int)slice.width, (int)slice.height);

                            //create texture
                            Texture2D texture = new Texture2D((int)slice.width, (int)slice.height, TextureFormat.ARGB32, false);
                            texture.SetPixels(0, 0, (int)slice.width, (int)slice.height, cols);
                            texture.filterMode = FilterMode.Point;
                            texture.Apply();

                            EditorGUI.DrawPreviewTexture(cellRect, texture);
                        }
                        else EditorGUI.DrawRect(cellRect, Color.yellow);
                    }
                    else if (l > i) EditorGUI.DrawRect(cellRect, new Color(.7f, .3f, .3f));
                    else EditorGUI.DrawRect(cellRect, Color.gray);

                    i++;
                }
            }

            //return space
            return (tileSize + spacing) * rows + 24;
        }

        string GetRuleName(int rule)
        {
            switch (rule)
            {
                case -1: return "Ignore cell";
                case -2: return "Empty";
                case -3: return "Not same";
                case -4: return "Any";
                default: return "null";
            }
            
        }
#endregion

        #region Export dropdown
        void ExportWindow(int windowID)
        {
            //create styles
            GUIStyle titleStyle = new GUIStyle(EditorStyles.boldLabel);
            titleStyle.alignment = TextAnchor.MiddleCenter;

            //title bar
            GUI.Label(new Rect(0, 0, _windows[windowID].width, 25), "Export options", titleStyle);
            EditorGUILayout.Space();

            bool changedShape = _file.ChangeGridShape((BetterRuleTileContainer.GridShape)EditorGUILayout.EnumPopup("Grid type", _file.settings._gridShape));
            if (changedShape) SetupGrid(true);

            //_file.settings._generatePalette = EditorGUILayout.Toggle(new GUIContent("Generate palette"), _file.settings._generatePalette);
            //_file.settings._addMissingRules = EditorGUILayout.Toggle(new GUIContent("Add missing rules", "In tiles which are variations of another tile, should the missing rules be added from the parent tile?"), _file.settings._addMissingRules);
            _file.settings._collapseSimilarRules = EditorGUILayout.Toggle(new GUIContent("Simplify similar rules", "Checks tiles which have the same sprite, finds a common pattern between them and replaces them with one rule that applies for all"), _file.settings._collapseSimilarRules);
            _file.settings._useUniversalSpriteSettings = EditorGUILayout.Toggle(new GUIContent("Universal sprite settings", "With this setting enabled, all rules which have the same output sprite will use the same output settings, so you don't have to individually set them. A new window will be enabled with this option"), _file.settings._useUniversalSpriteSettings);

            EditorGUILayout.Space();

            if (GUILayout.Button("Generate tiles"))
            {
                BetterRuleTileGenerator.GenerateTiles(_file);
                _windows[windowID].visible = false;
            }
            EditorGUILayout.Space();
        }
        #endregion

        #region Settings dropdown
        Vector2 _settingsWindowScrollPos;

        void SettingsWindow(int windowID)
        {
            //create styles
            GUIStyle titleStyle = new GUIStyle(EditorStyles.boldLabel);
            titleStyle.alignment = TextAnchor.MiddleCenter;

            //title bar
            GUI.Label(new Rect(0, 0, _windows[windowID].width, 25), "More settings", titleStyle);
            EditorGUILayout.Space();

            //scroll
            _settingsWindowScrollPos = EditorGUILayout.BeginScrollView(_settingsWindowScrollPos);

            //tile drawer
            guiBuilder.DrawInBackground(new GUIContent("Tile Drawer", "Setting to change the appearance of the tile drawer"), 1, (r) =>
            {
                _drawerSize = EditorGUILayout.IntField(new GUIContent("Tile drawer size", "Number of tiles visible in the drawer at once"), _drawerSize);
            });
            EditorGUILayout.Space();

            //sprite drawer
            guiBuilder.DrawInBackground(new GUIContent("Sprite Drawer", "Settings to change the appearance of the sprite drawer"), 6, (r) =>
            {
                _drawerHeight = EditorGUILayout.IntField("Sprite drawer height", _drawerHeight);
                _drawerCollumns = EditorGUILayout.IntField("Sprite drawer collumns", _drawerCollumns);
                _expandedDrawerCollumns = EditorGUILayout.IntField("Expanded drawer collumns", _expandedDrawerCollumns);
                _file.settings._saveSpriteDrawer = EditorGUILayout.Toggle(new GUIContent("Save sprite drawer", "if this option is enabled the sprite drawer will remember the tiles inside it when opening the editor again. If you have a lot of sprites enabling this option will cause the editor to load slower."), _file.settings._saveSpriteDrawer);
                if (GUILayout.Button(new GUIContent("Clear sprite drawer", "Remove unused sprites from the sprite drawer, this will only take affect after you reload the editor window.")))
                {
                    _file._imageObjects = new List<UnityEngine.Object>();
                    SetupGrid(false);

                    //select the object to prompt user to manually restart
                    //Selection.activeObject = _file;
                    //EditorGUIUtility.PingObject(_file);
                    //Debug.LogWarning("Removed unused sprites from the sprite drawer. Close the editor window and open it again to see the changes.");
                }
                if (GUILayout.Button(new GUIContent("Add All sprites", "Finds all sprites in the asset database and adds it to the sprite drawer.")))
                {
                    AddAllTextureAssets();
                }
            }, adjustHeight: 8);
            EditorGUILayout.Space();

            //limit drawer values
            _drawerSize = Math.Max(_drawerSize, 1);
            _drawerHeight = Math.Max(_drawerHeight, 32);
            _drawerCollumns = Math.Max(_drawerCollumns, 1);
            _expandedDrawerCollumns = Math.Max(_expandedDrawerCollumns, 4);

            guiBuilder.DrawInBackground(new GUIContent("Grid", "Change the appearance of the editor's grid"), 8, (r) =>
            {
                _zoomAmount = EditorGUILayout.FloatField("Current zoom", _zoomAmount);
                _file.settings._renderSmallGrid = EditorGUILayout.Toggle(new GUIContent("Render small grid", "Render the grid when it's zoomed out?"), _file.settings._renderSmallGrid);
                _file.settings._zoomTreshold = EditorGUILayout.FloatField(new GUIContent("Zoom treshold", "At what zoom value should the grid stop rendering?"), _file.settings._zoomTreshold);
                EditorGUILayout.Space();
                _gridCellSize = EditorGUILayout.Vector2IntField("Grid size", _gridCellSize);
                _tileRenderOffset = EditorGUILayout.Vector2Field("Grid cell offset", _tileRenderOffset);
            }, adjustHeight: -4);
            EditorGUILayout.Space();

            guiBuilder.DrawInBackground(new GUIContent("Locked cells", "Change how locked cells are displayed"), 3, (r) =>
            {
                _file.settings._renderLockedOverlay = EditorGUILayout.Toggle(new GUIContent("Show locked overlay", "Shows a striped overlay above the tiles to indicate that the cells are locked"), _file.settings._renderLockedOverlay);
                _file.settings._renderLockedOutline = EditorGUILayout.Toggle(new GUIContent("Show locked outline", "Shows an outline around tiles to indicate that the cells are locked"), _file.settings._renderLockedOutline);
                _file.settings._lockedOutlineColor = EditorGUILayout.ColorField(new GUIContent("Outline color", "The color of the outline around locked cells"), _file.settings._lockedOutlineColor);
            });

            //reset values to not crash the app
            if (_zoomAmount < .1f) _zoomAmount = .1f;

            EditorGUILayout.EndScrollView();
        }
#endregion

        #region Recolor dropdown
        int _recolorFrom;
        int _recolorTo;
        string _replaceFrom;
        string _replaceTo;
        void RecolorWindow(int windowID)
        {
            string tileTooltip = "Replaces all tiles in the selection, which are the same as the tile you specify in \"Replace from\", to the tile you specify in \"Replace to\"";
            string spriteTooltip = "Find all sprites in the selection, whose filename includes \"Replace from\", and replaces them with sprites where the \"Replace from\" text is replaced to \"Replace to\"";

            //create styles
            GUIStyle titleStyle = new GUIStyle(EditorStyles.boldLabel);
            titleStyle.alignment = TextAnchor.MiddleCenter;

            //title bar
            GUI.Label(new Rect(0, 0, _windows[windowID].width, 25), new GUIContent("Replace tiles in selection", tileTooltip), titleStyle);

            //show from and to popups
            EditorGUILayout.Space();
            _recolorFrom = EditorGUILayout.Popup(new GUIContent("Replace from", tileTooltip), _recolorFrom, _file.GetTileNames());
            _recolorTo = EditorGUILayout.Popup(new GUIContent("Replace to", tileTooltip), _recolorTo, _file.GetTileNames());

            //show prompt if not selected, show button if has selection
            EditorGUILayout.Space();
            if (_hasSelection)
            {
                if (GUILayout.Button("Replace tiles")) _file.RecolorSelection(_selectionRect, _recolorFrom, _recolorTo);
            }
            else GUILayout.Label("Select an area to replace tiles in!", EditorStyles.helpBox);

            //small space
            EditorGUILayout.Space();

            //second title
            EditorGUILayout.Space();
            GUILayout.Label(new GUIContent("Replace sprites in selection", spriteTooltip), titleStyle);

            EditorGUILayout.Space();
            _replaceFrom = EditorGUILayout.TextField(new GUIContent("Replace from", spriteTooltip), _replaceFrom);
            _replaceTo = EditorGUILayout.TextField(new GUIContent("Replace to", spriteTooltip), _replaceTo);
            EditorGUILayout.Space();
            if (_hasSelection)
            {
                if (GUILayout.Button("Replace sprites")) _file.RecolorSelection(_selectionRect, _replaceFrom, _replaceTo);
            }
            else GUILayout.Label("Select an area to replace sprites in!", EditorStyles.helpBox);

        }
#endregion
    #endregion
    }
}
#endif